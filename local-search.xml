<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HashMap的实现原理</title>
    <link href="/2023/04/24/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2023/04/24/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>HashMap的实现原理是什么样的?在面试中经常会遇到这个问题.那这个问题实际上是要问哪些问题呢,能不能将这个问题细化一下,表达得更精确一点.在我看来,通常要要问以下几个问题:</p><ol><li>HashMap的数据结构</li><li>HashMap的hash方法是什么样的,为什么要这么实现</li><li>HashMap的负载因子是什么,有什么用</li><li>HashMap是如何扩容的</li><li>HashMap的get方法和put方法是如何实现的</li></ol><p>把这些问题弄懂之后,对HashMap的原理算是很大程度的理解了.</p><h3 id="HashMap的实现原理"><a href="#HashMap的实现原理" class="headerlink" title="HashMap的实现原理"></a>HashMap的实现原理</h3><p>首先,我直接通过源码的方式提取出一些HashMap中一些重要的字段,在一些字段上标明了注释,在这里不关注太多的细节,只把最重要及最精华的部分拿出来讲,源码中有太多的细节实现,我觉得没有必要死抠一些可能暂时不太有用的东西,能把大体的实现思路说清楚是我的目的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//节点数组,在必要的时候会进行扩容,长度总是2的幂次方</span><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>        <span class="hljs-comment">//键的hash值</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash;<br>        <span class="hljs-keyword">final</span> K key;<br>        V value;<br>  <span class="hljs-comment">//下一个节点,以链表的形式连接</span><br>        Node&lt;K,V&gt; next;<br>&#125; <br><br><span class="hljs-comment">//当链表中的数量大于等于8时,为了提高查询性能,将会转成红黑树来进行存储</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">//默认的负载因子,用于判断是否扩容</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><br><span class="hljs-comment">//默认的初始容量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><br><span class="hljs-comment">//在Map中的键值对数量</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">//下一次扩容的大小</span><br><span class="hljs-keyword">int</span> threshold;<br><br><span class="hljs-comment">//负载因子</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br></code></pre></td></tr></table></figure><p>HashMap由数组+链表(可能转换成红黑树)组成,数组的优点是可以通过索引直接进行访问,复杂度为O(1),那这个数组要多大才合理呢?另外索引该怎么计算出来才合理呢?很显然,数组不可能无限大,因为我们的内存有限.另外,索引是通过计算hash值来实现的,最理想的情况是我们通过key算出一个hash值,然后对数组的大小取模,恰好每次都能得出一个之前没有用到的索引位置上.但是显然这是不可能的,因为即使hash值不同,但是数组的大小是固定的,那么必然算出的索引有可能会一样,这就导致了碰撞,这样一来就必须在数组的一个索引位置上存放多个元素(如果key是一样的,那么对旧key对应的值进行替换).但是,我们一定会想尽可能的均匀地把元素放到数组的每个位置中,尽量少发生碰撞,因为如果碰撞太多,那么我们设置值和取值就需要遍历链表来完成.这个时候,如何计算hash值使得元素能更均匀分布变得至关重要.</p><p>在源码中,hash值的计算是这样的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算索引的代码是这样的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//n为当前数组大小</span><br>index = (n - <span class="hljs-number">1</span>) &amp; hash <br></code></pre></td></tr></table></figure><p>这里把这段代码放在一起是因为它们是有关联的.首先,计算索引的方式使用了&amp;操作,比如数b是2的幂次方的时候,将这个数减去-1,与另外一个数a做&amp;操作,计算的结果就相当于a%b,并且这样的效率会更高,例如17&amp;4=1,7&amp;4=3.</p><p>hash值的计算是这样的:先计算hashCode,将其右移16位,再与本来的hashCode做异或操作,如果直接用hashCode去做&amp;运算,那么可以很明显的看出是低位的值决定了最终计算出来的值是什么,因为高位&amp;0得出的值永远是0.右移的话,可以让高位也参与到整个hash的计算过程.这样的计算方式可以使得计算出来的值的分布更加随机,这跟我们上面所叙述的不谋而合.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>五种IO模型</title>
    <link href="/2023/04/24/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/04/24/%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h1 id="五种IO模型"><a href="#五种IO模型" class="headerlink" title="五种IO模型"></a>五种IO模型</h1><p>现在,我来介绍一下我所理解的五种IO模型.在本篇文章中,我们以Input为例来进行讲解.其中五种IO模型分别是</p><ul><li>阻塞式IO</li><li>非阻塞式IO</li><li>IO多路复用</li><li>信号驱动IO</li><li>异步式IO</li></ul><p>我会在这篇文章尽可能的把这几个IO模型讲得通俗易懂.</p><h2 id="阻塞式IO"><a href="#阻塞式IO" class="headerlink" title="阻塞式IO"></a>阻塞式IO</h2><p>当我们的应用程序要进行数据的读取时,我们通过<code>系统调用</code>去获取数据,通常程序会调用一个<code>recvfrom</code>,在<code>阻塞式IO</code>的场景下,发出这个信号之后,应用程序就会阻塞,直到数据准备好,并且从<code>内核空间</code>复制到<code>应用程序数据缓冲区</code>之后,这个读取过程才算完成.整个过程分成两步,一是等待数据准备好,二是数据要有一个从<code>内核空间</code>到<code>应用程序缓冲区</code>的一个过程,这两个过程进行完之后,我们的应用程序才可以读取数据,在这之前,我们的应用程序都是阻塞的,所以我们称之为<code>阻塞式IO</code>.![阻塞式IO](../../blog-img/截屏2023-04-23 下午11.45.16.png)</p><p>在这里引用一张<code>Unix网络编程</code>书中的一张图片,我们可以看到进程发出一个<code>recvfrom</code>在整个过程中都处于阻塞状态,第一个小过程是等待数据,第二个小过程是从<code>内核空间</code>复制数据到<code>用户程序缓冲区</code>,直到数据准备完成之后,内核返回一个OK的响应.</p><p>在这里,我将用一个生活的场景来类比这个过程,比如我们去饭馆吃饭,通常我们会有两个过程,第一个过程是点菜,第二个过程是上菜,并且你和老板约定说:”你什么也不做,就干在这等着,菜好了就端上来,并且上菜过程你也不做其他事情”.那么阻塞的场景好比是我们去点菜,然后菜品制作的过程我们一直在等,菜品制作完之后我们还等着上菜,整个过程都一直处在等待状态.</p><p>但是有时候,你不想这样干等着,你想玩会手机,你和老板约定说:”你们厨房先做菜,我会隔一段时间问一下菜准备好了没,如果菜准备好了,就帮我端上来,上菜过程我不玩手机,我就等着上菜“这样,你就可以玩会手机,然后过几分钟就问一下菜准备好了没,这样你就可以用等待做菜的时间去玩手机了,不必一直等着,但是你还是得不定时的去问一下老板.这就是我们即将介绍的<code>非阻塞式IO</code>.</p><h2 id="非阻塞式IO"><a href="#非阻塞式IO" class="headerlink" title="非阻塞式IO"></a>非阻塞式IO</h2><p><code>非阻塞式IO</code>是应用程序发出一个<code>recvfrom</code>指令,但是如果数据没有准备好的话,会立即得到一个响应,应用程序会隔一段时间再次发出指令,直到数据准备好的时候,数据就会从<code>内核空间</code>复制数据到<code>用户程序缓冲区</code>,这个复制数据的过程和<code>阻塞式IO</code>是一模一样的,应用程序同样是阻塞的.但是我们的第一个等待数据准备的过程中,应用程序是可以做其他事情的,所以<code>非阻塞式IO</code>实际上指的是第一阶段是非阻塞的,而第二个阶段还是阻塞的.这里继续引用<code>Unix网络编程</code>书中的一张图片.</p><p>![非阻塞式IO](../../blog-img/截屏2023-04-24 上午12.19.08.png)</p><p>我们把程序不时发出<code>recvfrom</code>的这个过程叫做<code>轮询</code>,当发出<code>recvfrom</code>的时候,此时数据还没有准备好,内核返回一个<code>EWOULDBLOCK</code>的响应,表示数据还没准备好.等哪一次准备好了,就会进行数据复制的过程,复制完成后,会返回一个OK的响应.很明显,我们可以看出<code>非阻塞式IO</code>和<code>阻塞式IO</code>的区别仅在第一个过程,但是第一个过程变得更加的灵活.</p><p>通过一个类比的例子,我们应该可以很清晰的知道一个应用程序读取数据的两阶段了,接下去的几个模型中,不再进行这种类比,因为我觉得只要理解了这两个过程,直接阐述具体模型更容易理解,类比就更复杂了.</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>废话不多说,先给出一张<code>IO多路复用</code>的图,英文叫做<code>IO Multiplexing</code>.</p><p>![IO多路复用](../../blog-img/截屏2023-04-24 上午12.37.00.png)</p><p>首先,我们可以很直接的从图中可以看出程序首先调用了一个<code>select</code>,然后等待数据准备好,但是此时并没有直接进入数据复制的过程,而是还需要再发出一个<code>recvfrom</code>,才会进行数据复制的过程,第一个阶段是阻塞的,第二个阶段还是阻塞的,跟第一种<code>阻塞式IO</code>几乎没有太大的差别,但是很明显还是可以看出,在等待数据准备好之后,应用程序可以选择去进行数据复制,也可以选择后面再进行数据复制,相当于把<code>阻塞式IO</code>分成了两个阶段来做,提高了灵活性.但是除此之外,第一个阶段其实也是暗藏玄机的,在这个过程中,我们可以等待多个输入完成,比如在网络编程中,是等待多个<code>套接字</code>,而上面的两种模型,通常是等待一个输入准备好.在这个模型中,如果多个输入中,如果没有一个输入可以读取,那么应用程序将会一直等待下去,直到有大于或等于一个输入可以读取,那么将返回给应用程序一个<code>readable</code>响应,通常根据这个响应,我们会知道哪些输入已经准备好,哪些输入还没有准备好,然后我们根据这些准备好的输入来进行数据的复制过程,这个数据复制过程和上面两种模型的数据复制是一模一样的,这里不再阐述.</p><p>之所以叫做IO多路复用,我认为主要来自于第一个阶段可以等待大于一个或多个输入准备好,一旦有大于等或于一个输入准备好的时候,程序将不再处于阻塞状态,可以立即处理一个或多个准备好的输入,这种处理比<code>阻塞式</code>IO更加的灵活.</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql之MVCC原理</title>
    <link href="/2022/11/24/Mysql%E4%B9%8BMVCC%E5%8E%9F%E7%90%86/"/>
    <url>/2022/11/24/Mysql%E4%B9%8BMVCC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>众所周知,mysql的数据库默认隔离级别是可重复读,那么mysql是如何做到可重复读的呢.这篇文章,就来谈谈mysql的多版本控制机制,也就是MVCC.</p><h3 id="从版本链开始说起"><a href="#从版本链开始说起" class="headerlink" title="从版本链开始说起"></a>从版本链开始说起</h3><p>假设我们现在有一张表t,里面有id,name,id是主键,这个表目前是空表.现在我们开启一个事务,往里面插入一条id=1,name=mysql的数据.mysql在聚簇索引中,除了保存数据外,还保存了一个trx_id和一个roll_pointer字段,trx_id表明数据是哪个事务操作的该条数据,roll_pointer指针指向该数据的前一个版本.假设我们刚刚进行插入语句时的事务id为100,那么聚簇索引中这条数据的trx_id为100,roll_pointer指向一条insert undo记录,可以简单理解这条记录和我们的数据是一模一样的,除了它的roll pointer是空的.可以简单用一张图来描述我们现在的数据状态:</p><p> <img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8fh9g6f2wj310i0ew0ta.jpg" alt="截屏2022-11-23 下午11.27.28"></p><p>然后,假设我们开启了一个新的事务,对id=1的记录对应的name进行修改,改成了java,事务id为200.接着,又开启一个新的事务,将name又改成了spring,事务id为300.对于mysql来说,一条记录是有保存修改历史的,就像我们用的git一样,有版本的概念.mysql同样也是这样的思想,经过两次修改,最新的name是spring,trx_id为300,但是事务id为100和200的两条历史记录也会保存下来.就我们上面的上次修改来说,最终形成的数据状态是这样的:</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h8fhhgfig5j318g0ii3zc.jpg" alt="image-20221123233538573"></p><p>和insert操作不一样,update产生的历史版本记录的roll_pointer是有指向的,指向它的上一个版本.我们可以看到,新的数据已经是事务id为300的数据了,越上面的数据版本越新,这就是版本链的概念.</p><h3 id="可重复读的实现"><a href="#可重复读的实现" class="headerlink" title="可重复读的实现"></a>可重复读的实现</h3><p>说完了版本链,现在来讲讲可重复读是如何实现的.假设我们上面所说的这个场景的事务都已经提交了,那么我们开启一个新的事务,假设事务id是400,那么我们用普通的select语句去读取id为1的记录,我们再假设整个系统目前就我们这么一个事务,那么读出来的name就是spring.那假如此时系统里面还有其他事务也在修改id为1的记录呢?这里就要引出一个快照的概念,其实就是版本链上哪些数据可见的规则.在这个隔离级别下,快照会在事务开始时生成一次,并且只生成这一次.假如我开启事务id为400的事务时,系统中还有一个事务把id为1的name修改为linux,但处于未提交状态,事务的id为399.这个未提交状态是在我们开启事务id为400的时候知道的,如果下一秒这个事务都提交了,我们的快照也是认为没有提交的.另外,假设此时快照生成后,还有事务id比400还大的事务被创建来修改id为1的记录,即使这些事务提交了,快照也会认为它们没有提交,因为在快照看来,时间就仿佛冻结在开启事务的那一刻.</p><p>比如说,当事务id为400的事务对id进行一个select name from t where id =1的查询,那么获取到的值是spring.然后事务id为399的事务提交了,事务id为400的事务再次运行同样的查询语句,那么返回的name还是spring.因为我们这两次查询用的是同一个快照,那么即使事务id为399修改了数据之后提交,我们也认为它是没有提交的,简单的理解就是:只认为在事务开启前那一刻已提交的数据才是查得到的.这样,无论事务id为400所在的事务查询多少次,查出来的name永远都是spring.除此之外,在事务id为400的事务在查询中,可能会有新的事务也来修改这个值,但是我们知道,快照对这些事务是不可见的,所以更加读不到它们的修改.但是,这些当时还在运行中的事务和后来运行的事务对id=1的记录的修改是会加入到版本链中的(即使事务还没提交),我们只是依据快照,自版本链的顶部往下搜索,过滤掉一些不可见的记录,直到找到第一条符合的记录,也就是快照开启时已提交的最新的一个版本对应的记录.其实可以画图,将所有的这些记录都加入到版本链中,来模拟这个过程.但是画图实现太费时间了,所以我就懒得画了.</p><h3 id="如果是读已提交隔离级别呢"><a href="#如果是读已提交隔离级别呢" class="headerlink" title="如果是读已提交隔离级别呢"></a>如果是读已提交隔离级别呢</h3><p>对于已提交隔离级别来说.也是生成快照,但是它和可重复读不一样的一点是,只要查询,就生成一个新的快照.这样一来,因为快照会变化,所以中途如果有数据提交了,在这个隔离级别下是可以读得到的.比如将上面的例子换成在这个隔离级别下进行实验,第二次查询出来的name将会是linux.因为第一次查询时,事务id为399的事务还没有提交,生成的快照认为此条数据是读不到的.但是第二次查询,又生成了新的快照,事务id为399的事务提交了,再次查询就可以读到linux这个值.</p><p>所以,这两个隔离级别下都是读已提交的数据.只是因为快照的生成时机不一样,导致最终读取的数据不一样而已.</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么保证kafka的消息不丢失</title>
    <link href="/2022/11/08/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81kafka%E7%9A%84%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/"/>
    <url>/2022/11/08/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81kafka%E7%9A%84%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h3 id="从一个场景开始"><a href="#从一个场景开始" class="headerlink" title="从一个场景开始"></a>从一个场景开始</h3><p>这篇文章,我来谈谈怎么保证kafka的消息不丢失这个话题.首先,我来假设一个场景,现在你要处理客户往银行卡充值的事件,比如A用户向银行卡充值100元,200元等类似的事件.假设你使用一个项目来把这个事件发给kafka,另外一个项目从kafka获取这个事件,然后对事件进行处理,往数据库里客户的银行卡上累加金额.这个场景如果把事件丢失了,那就是事故了.我们的系统绝对不允许有任何的差错,一旦出错,客户会投诉,别人就不敢用这个系统了.有了这样的场景,我们必须认真的去考虑怎么保证消息不丢失,并且能正确处理这些消息.我们的整个架构可以用下图来表示:</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7y75twn13j312t0u0t9z.jpg" alt="截屏2022-11-08 下午11.16.04"></p><p>我们来简单举个例子,什么情况会丢失消息.</p><ul><li><p>假如用户发起充值,这个时候项目A要发送充值事件到kafka,如果项目A没等到kafka响应,就认为事件提交成功了,那么就会丢失消息.这是生产者丢失消息的情况.</p></li><li><p>如果kafka没有把消息存入到磁盘,突然发生宕机.这是kafka丢失消息的情况.</p></li><li><p>如果项目B读取到消息后,还没将数据存储到数据库,提前告诉kafka消息已经处理完成.但这时数据库存储数据时发生错误了,那么消息就丢失了.这是消费者丢失消息的情况.</p></li></ul><p>这里只是举点简单的例子来表明消息丢失的情况,当然还会有很多场景也会造成消息的丢失,但是万变不离其宗.这里想表达的是,消息会不会丢失,不只是kafka的责任,生产者和消费者也承担着责任.要保证消息不丢失,这些环节都得考虑.</p><h3 id="生产者怎么保证消息不丢失"><a href="#生产者怎么保证消息不丢失" class="headerlink" title="生产者怎么保证消息不丢失"></a>生产者怎么保证消息不丢失</h3><p>生产者要保证消息不丢失,一定要等到kafka响应成功了,才放弃发送消息.如果消息发出去,比如kafka目前不可用了,那我们要继续重试去发送消息.比如网络异常了,在10秒内没有收到kafka的响应,我们也要重试去发送消息.总之生产者遇到错误了,解决之道就是不断重试(当然,在实际场景要灵活变通,我在这里有点激进,主要是想传达这种思想).直到生产者收到kafka的成功响应了,我们才能认为消息已经成功发送到kafka了.但这可能还不够,生产者还可以让kafka多做点事情,生产者可以要求kafka要把消息备份多少份,才能算消息发送成功.因为一台kafka机器(准确来说是分区,但是这里假设读者对这个概念是清楚的)还不够安全,假如宕机了,这个时候整个系统就使用不了.所以一般会有好几台kafka机器,一台负责接收消息,另外几台复制这台机器的消息,接收消息的那台kafka叫做首领,复制消息的叫做副本.假如一台宕机了,可以选举一台新的机器作为新的首领来接受请求.生产者可以要求kafka集群备份了N份,才能够向生产者发出成功响应.这个配置,在kafka术语中叫ack.在生产者端,可以配置ack参数,比如ack=3代表消息要复制3份成功后,kafka才能认为消息写入成功,给生产者返回成功响应.ack=all则表示所有机器都复制成功了,才能返回成功响应.否则生产者一直重试直到成功.当然重试有可能会发生消息重复,这个不在我们的讨论范围.</p><p>总结起来,生产者要做两件事情保证消息不丢失:</p><ul><li>如果消息发送失败,重试直到kafka返回成功响应.</li><li>设置ack=all(或者一个比较大的值N),让kafka的所有机器(或者N台)都获取到消息,才算消息写入成功,才返回成功响应.</li></ul><h3 id="kafka怎么保证消息不丢失"><a href="#kafka怎么保证消息不丢失" class="headerlink" title="kafka怎么保证消息不丢失"></a>kafka怎么保证消息不丢失</h3><p>消息在kafka中怎么才能不丢失呢.我们假设一个完美的情况,一台kafka接收到消息,然后另外几台kafka非常迅速的从这台kafka上复制消息,整个kafka的所有机器的消息都是同步的.但是事情不可能一直这么完美,因为网络等原因,副本有可能会复制失败,那么副本就不会有首领所有的消息,直到网络恢复正常,副本把没复制到的消息从首领那里迅速复制过来,重新变成同步的.另外首领也可能宕机,那么就要重新选出一个首领来处理消息,新的首领应该具备的特点是拥有所有的消息,但是有的副本可能还没复制到最新消息,导致消息不完整.如果让这些副本成为首领,那么可能就存在最新的消息丢失的可能性,所以我们不应该让没有所有消息的副本成为首领,在kafka的世界里,术语叫做禁用不完全的首领选举,通过配置<em>unclean.leader</em>.election.enable=false来制定,我们令可kafka不可用,也不能让这种副本成为首领.</p><p>另外,我们可以规定有几台kafka拥有全部的消息才能提供给生产者写入服务,比如设置为3,那么当至少有3台机器拥有所有的消息才能提供写入服务.这个在kafka中通过min.<em>insync</em>.replicas=N这个参数配置.再结合生产者发送的ack要求,kafka可以识别ack要求,才认为消息写入成功,给生产者返回成功响应.这样可以锦上添花.</p><p>总结起来,kafka要保证三件事情保证消息不丢失:</p><ul><li><p>通过配置<em>unclean.leader</em>.election.enable=false禁用不完全的首领选举,不让非同步副本提供服务</p></li><li><p>配置min.<em>insync</em>.replicas=N,保证同步副本个数,防止首领宕机后没有其它同步副本可以提供服务,没有足够的同步副本时,不对外提供写服务.</p></li><li><p>根据ack要求,向生产者返回成功响应</p></li></ul><h3 id="消费者怎么保证消息不丢失"><a href="#消费者怎么保证消息不丢失" class="headerlink" title="消费者怎么保证消息不丢失"></a>消费者怎么保证消息不丢失</h3><p>消息目前已经安全的存储到kafka上了,消费者从kafka已经可以获取到所有的消息.这个环节可能丢失的原因是,当消费者没有成功处理消息,就告诉kafka消息处理完成,这种情况就会丢失消息,术语叫做提前提交消息偏移量.一个最简单的做法是保证消息处理成功了,再提交偏移量告诉kafka消息真正处理完成了,这样消息就真正处理到了.所以在消费者这里,没真正处理完成就是丢失,而生产者和kafka的消息丢失主要表现在数据的传输和存储上.在上面的场景中,假如消费者拉取到一个充值事件,那么只有当数据存储到数据库中了,才应该拉取下一个充值事件(这里也有点激进,其实可以把处理失败的消息存储起来,后续再处理,总之要学会变通),否则消息就会丢失.消费者在处理过程中发生错误了,就不断重试去拉取发生错误的消息,直到处理成功了,才提交偏移量,这样就能保证消息不丢失.</p><p>总结起来,消费者要做一件事情保证消息不丢失</p><ul><li>消息处理成功了,再提交偏移量,如果处理失败,重试去拉取消息,直到处理成功.</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在上面的场景中,充值事件到消费者这里已经不会丢失了,但是可能会出现消息重复.这个消息重复在我们的场景下也是一个事故,假如用户充值10元,我们因为消息多重复了几条,给用户充值了50元,那么公司将面临极大的损失,这绝对是不允许的.一个能想到的解决方案是给消息设置一个唯一标识,如果数据库中已经有该消息,则认为已经处理成功了.其实如果学会分析kafka消息怎么可能丢失,去分析消息怎么可能重复是非常轻而易举的事情.比如Kafka已经成功写入消息,但是给生产者返回成功响应时,网络出问题了,生产者误以为没有发送成功(比如设置了超时重试),那么就会重新发送消息,kafka就重复写入了一条消息.再比如,消费者成功处理了消息,但是偏移量还没提交,消费者宕机了,那么下一次拉取的消息就是重复的.消息重复是可以避免但无法杜绝的,如果kafka没办法做幂等,那么这个重担就只能交给消费者去做了.</p><p>另外,提供什么样的消息安全级别要根据场景来定,不同的场景适合不同的方案,我们的这种方案确实安全,但是为了安全可能会牺牲很多的性能,有可能因为太安全了,导致整个系统运行得非常的缓慢,消息处理的吞吐量很低,也会给系统带来灾难.总而言之,要结合真实的情况去制定一个合适的方案,灵活变通才是王道.</p>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对JMM与happen-before的理解</title>
    <link href="/2022/10/29/%E5%AF%B9JMM%E4%B8%8Ehappen-before%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2022/10/29/%E5%AF%B9JMM%E4%B8%8Ehappen-before%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Java-Memory-Model"><a href="#Java-Memory-Model" class="headerlink" title="Java Memory Model"></a>Java Memory Model</h3><p>编写一个程序,我们首先希望它是正确的,其次是快的,如果程序不正确,那么再快也没用.尤其在多线程环境下,如果没有很好处理并发问题,那么很容易导致数据的不一致性,这将产生严重的问题.所以,理解java内存模型-JMM是非常重要的.</p><p>首先来看一下java内存模型的组成:<img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7m8getq6yj30hu0mujsu.jpg" alt="jmm"></p><p>我们需要知道这样一个非常非常重要的事实,在CPU中运行一个线程,线程所读取到的值可能存放于寄存器,可能存放于缓存中,这些是线程自身所能看到的数据.只有堆上的数据是所有线程都能看到的,也就是说线程共享本地内存.</p><p>我来举一个最简单的情况:</p><p>假如有这么一个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Number</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.a = a;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在单线程场景下,执行以下操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Number num = <span class="hljs-keyword">new</span> Number();<br>num.set(<span class="hljs-number">3</span>); <span class="hljs-comment">//设置3</span><br>print(num.get()); <span class="hljs-comment">//打印3</span><br></code></pre></td></tr></table></figure><p>毋庸置疑,这个操作绝对是没有问题的,对num这个对象设置3这个值,即使值没有被刷新到线程共享的本地内存中,帮它存放到缓存中,也不会出现问题.</p><p>那么考虑多线程场景,如果两个线程同时更新和读取a值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Number num = <span class="hljs-keyword">new</span> Number();<br>num.set(<span class="hljs-number">3</span>); <span class="hljs-comment">//设置3 A线程设置</span><br>num.set(<span class="hljs-number">4</span>)；<span class="hljs-comment">//设置4 B线程设置</span><br>print(num.get()); <span class="hljs-comment">//A线程读取</span><br></code></pre></td></tr></table></figure><p>如果程序按照这个顺序执行,那么A线程读取的值,会是3还是4呢,其实两种情况都有可能发生.如果线程B设置的值能写入本地内存,并且线程A不读取缓存中的值,也是读取本地内存中的值,那么读取的值就是3.如果线程直接读取在缓存中的值,那么就会读到3.所以这种代码是有问题的,这种叫做可见性问题.为了解决可见性问题,java提供了一个叫做<strong>volatile</strong>的修饰语,我们将类改成:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Number</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> a;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.a = a;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么按照上面程序的执行顺序会输出什么呢?答案是会输出4.volatile修饰的变量能保证对变量读取和写入都会去直接和本地内存交互,也就是说不会经过缓存,读取直接从本地缓存读取,写入直接写入本地缓存,这样以来会很容易理解为什么会读取到4了.除此之外,volatile还有一个非常重要的特性,它会刷新线程所能看到的其他值到本地内存当中.我们再来举一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a;<br>  <br>  <span class="hljs-comment">//A线程执行该代码</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">consume</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">while</span>(flag) &#123;<br>      <br>   &#125;<br>   a = a - <span class="hljs-number">1</span>; <span class="hljs-comment">//C1</span><br>     flag = <span class="hljs-keyword">true</span>; <span class="hljs-comment">//C2</span><br>  &#125;<br>  <br>  <span class="hljs-comment">//B线程执行该代码</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produce</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">while</span>(!flag) &#123;<br>   <br>   &#125;<br>   a = a + <span class="hljs-number">1</span>; <span class="hljs-comment">//P1</span><br> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">//P2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们假设这里对a的操作是原子操作(其实是三个操作).那么开启两个线程执行上述代码,值都会在0和1之间徘徊,因为每当读取flag的值的时候,顺带也有把a的最新值从本地内存读出来,写入的时候也是一样的.如果volatile只能保证flag被写入本地内存,不能保证a写入到本地内存,那么a一直无法读取到另一个线程的变更,那么可能会出现a=-1或者a=-2等情况,但其实会在写入flag的值的时候,顺带写入a的值,读取的时候也是同样的道理.更新一个volatile变量,顺带把线程操作的其它变量也一起刷新到本地内存去,做这样一件顺便且合理的事情,何乐而不为呢?</p><p>但是计算机为了追求速度,会引进一些优化手段,如<strong>重排序</strong>.重排序会将一些看似没有关联的操作顺序给重新排列,以追求更高的执行速度.在上面这个代码中,P1操作可能会被排序到P2之后进行,即先更新flag的值,再更新a的值,这样一来,flag被写入到本地内存中,因为a的操作还未开始,即使被写入本地内存后还是原值,还是会产生a的值被不确定的读取问题.</p><p>为了防止这种情况,java限制对volatile的这些操作是不能被重排序的,也就是C2和P2两个操作不能被重排序.这样一来,程序就能按照我们的意愿来执行了.</p><h3 id="Happen-Before"><a href="#Happen-Before" class="headerlink" title="Happen Before"></a>Happen Before</h3><p>说到Happen Before规则,有些人可能会被它拗口的一些规则给搞得头昏脑涨.我觉得只要在理解了内存模型和可见性的基础上,就不难理解这些规则了.多线程程序要正确执行,首先要满足可见性,其实要满足原子性,可见性使得操作的数据是最新的,而原子性保证操作的过程不会因为线程对数据的同时更新而导致错误结果.在本地内存中数据对线程都是可见的,但由于操作的顺序问题,也可能导致数据不准确,比如a=a+1这个操作就不是原子操作,它实际包含读取a,设置a=a+1,写入a三个操作,这样两个线程同时执行,可能由于顺序问题而导致a的值只更新了1次.总结起来,多线程下数据的正确性=可见性+原子性.只有同时满足这两点,程序才能执行正确.原子性主要靠锁或者CAS等操作来保护(这里的主题不是这个),可见性就靠java制定的一些规则来保护,比如Happen Before.</p><p>Happen Before中的一些规则,无非就是要保证可见性,在我看来,无非就是要保证数据被及时刷新到本地内存中.上面讲解的volatile其实就具备了这样的特性,比如:对volatile修饰的值的写入操作在下一次读取时总能读到正确的值.在Java并发编程实战一书中,这个规则被描述成:对volatile变量的写入操作必须在对该变量的读操作之前执行.我不知道这个是翻译问题还是什么问题,总觉得描述得很奇怪,为什么写入一定在读之前,我可以读两次再写不行吗?我的理解是说要保证读写的可见性即可,爱怎么读就怎么读!</p><p>再举一个Happen Before规则,即进入一个同步块总能从本地内存读取到线程可见的变量的最新值,退出一个同步块总能写入变量的最新值到本地内存中.这个同步块所具备的效果,不就是volatile所具备的效果吗?再加上同步代码块能保证程序是同步执行的,所以所保护的代码段就一定不会出问题,即满足了可见性和原子性两个条件.至于重排序,比如在同步代码块中,在符合逻辑的情况下(比如变量有前后依赖关系就不能乱排),爱怎么排就怎么排.</p><p>Happen Before还有其他一些规则,但总结起来,感觉就是本地内存刷新和读取规则,目的就是保证数据对所有线程的可见性,不要在一些地方直接读取缓存,或者不把缓存数据写入本地内存.所以叫Happen Before总觉得很奇怪,叫可见性规则或者Java内存刷新与读取规则可能更合适.当然,这只是个人的见解.:)</p>]]></content>
    
    
    <categories>
      
      <category>并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序之精彩解说</title>
    <link href="/2022/09/14/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B9%8B%E7%B2%BE%E5%BD%A9%E8%A7%A3%E8%AF%B4/"/>
    <url>/2022/09/14/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B9%8B%E7%B2%BE%E5%BD%A9%E8%A7%A3%E8%AF%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="故事开始了"><a href="#故事开始了" class="headerlink" title="故事开始了"></a>故事开始了</h3><p>假设有这样一个场景,有个小学生给了你10000个数字,要你在一天之内把这些数字排好序,然后交给他.身为一个程序猿,你想到了排序算法,进而又想到了快速排序.那么快速排序是怎么实现的呢?</p><p>既然10000个数字能排序,那么6个数字也能排序,只要6个数字时,运行结果是准确的,那么这个排序算法就能通用任意个数字的排序.假设我们有这么6个数字:</p><p><code>3 7 2 1 4 6</code> .首先,快速排序要找个基准点,一般是开头的数字,在我们这个例子中是3,然后想办法把3放到数列的中间位置,使得左边的数字比3小,右边的数字比3大,然后再递归3左右两边的数组,继续使用快速排序,最后就能全局排序.所以要搞清楚,有什么办法可以做到我们要的效果.一个可行的方法是这样的:在数组的头部和尾部各放置一个指针,然后让尾巴和3进行比较,如果大于等于3,那么就往左移动,如果碰到了比3大的数,那么就停下来.另外,如果碰到了左边的指针,也要停下来,这说明我们要的效果已经达到了.说这么多,可能还不够直观,我们用图的方式来模拟这个过程.</p><p>起初,整个指针的位置是这样的:</p><p> <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i3sgao46j20oc084aa2.jpg" alt="截屏2022-09-24 下午11.17.26"></p><p>指针继续向左移动,6比3大,4也比3大,直到遇到了1,比3小,这个时候右边的指针就停下来,并且在移动过程中并未碰到左边的指针.现在指针的位置是这样的:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i588myc3j20lo0883yk.jpg" alt="截屏2022-09-24 下午11.20.33"></p><p>同理,左边的指针如果小于等于3,也要向右移动,直到遇到比3大的数,或者遇到了右指针也要停下来.3等于3,向右移动,7大于3,停下来,现在指针的位置是这样的:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i40saekgj20m807smx6.jpg" alt="截屏2022-09-24 下午11.23.47"></p><p>此时,我们把两个指针所指的数字交换一下,为什么要交换呢?因为我们要使得左边的数比3小,右边的数比3大,然后就形成了下面这张图:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i44cs5kpj20m0080q2x.jpg" alt="截屏2022-09-24 下午11.29.09"></p><p>此时,两个指针还未碰到,但是我们能看到的是:右指针右边的数据全部比3大,左指针左边的数字全部比3小.这是一个很直观的现象.</p><p>接着,我们继续移动右指针,这里的7还要和3再比较一次,当然肯定是比3大,所以一定会左移.然后2比3小,右指针又停下来了:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i4btxz5cj20mq08et8q.jpg" alt="截屏2022-09-24 下午11.36.04"></p><p>然后左指针用1和3比,肯定要向右移动,然后移动过去时,发现碰到了右指针:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i4e2j0k0j20m807ugll.jpg" alt="截屏2022-09-24 下午11.38.27"></p><p>它们撞到一起去了,这个时候我们已经达到了我们的目的,这就是左右指针停下来的一个标志,我们把开头的3和此时这个位置上的2进行一个交换,那么就变成了:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6i4i06tv6j20lm08ijrd.jpg" alt="截屏2022-09-24 下午11.41.22"></p><p>卧槽!我们达到我们的终极目的:使得3左边的数字比3小,右边的数字比3大.</p><p>接下来的故事是,保持3这个位置不动,将左边的2,1当成一个数组,右边的7,4,6当成一个数组,然后再重新对每个数组搞两个指针进行移动,切记:<strong>撞到了就是成功了</strong>.那么我们可以使用递归的方式来做剩余的事情.如果数组只剩下一个元素,那么一定要结束递归,此时的结束条件是<code>i&gt;=j</code>.下面将展示快速排序的代码,也就是模拟我们现在的整个过程.</p><h3 id="快速排序代码"><a href="#快速排序代码" class="headerlink" title="快速排序代码"></a>快速排序代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] nums,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>     <span class="hljs-keyword">if</span>(i&gt;=j)&#123;<br>         <span class="hljs-keyword">return</span>;<br>     &#125;<br>     <span class="hljs-keyword">int</span> start = i;<br>     <span class="hljs-keyword">int</span> end = j;<br>     <span class="hljs-keyword">int</span> basic = nums[i];<br>     <span class="hljs-keyword">while</span>(i &lt; j) &#123;<br>         <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; nums[j] &gt;= basic) &#123;<br>             j--;<br>         &#125;<br>         <span class="hljs-keyword">while</span>(i&lt; j &amp;&amp; nums[i] &lt;= basic) &#123;<br>             i++;<br>         &#125;<br>         <span class="hljs-keyword">if</span>(i&lt;j) &#123;<br>             ArrayUtil.swap(nums, i, j);<br>         &#125;<br>     &#125;<br>     ArrayUtil.swap(nums,i,start);<br>     quickSort(nums,start,i-<span class="hljs-number">1</span>);<br>     quickSort(nums,i+<span class="hljs-number">1</span>,end);<br> &#125;<br></code></pre></td></tr></table></figure><p>首先代码的开始是判断是不是要结束递归,紧接着,搞出两个指针,开始和开头位置的数字进行比较.代码里面始终要判断<code>i&lt;j</code>,因为<strong>撞到了就是成功了</strong>,无需再进行下去,另外再没撞到之前,如果双方都停下来一次之后,要交换一下所指的数字,这是为了确保右边的数字比开头的数字大,左边的数字比开头的数字小.</p><p>然后,如果i和j相遇,那么一次完整的快速排序就结束了,在遇到的地方和开头的数字进行一次交换,接着再进行左右两个数组的排序,如此递归下去,直到排完.</p><h3 id="故事的最后"><a href="#故事的最后" class="headerlink" title="故事的最后"></a>故事的最后</h3><p>你轻轻松松的排完了10000个数字,写下代码的过程只用了59秒,接着你拿起了桌上那瓶95年的可乐喝了一口,顺手掏出了手机,开始刷起了你养了多年的B站号,进入了传说中的<strong>工作休息区</strong>.</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka的ack机制</title>
    <link href="/2021/07/08/Kafka%E7%9A%84ack%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/07/08/Kafka%E7%9A%84ack%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kafka的ack机制"><a href="#Kafka的ack机制" class="headerlink" title="Kafka的ack机制"></a>Kafka的ack机制</h2><p>在博客中有一篇关于Kafka消息丢失和消息重复的文章,已经有对ack进行了讨论,这里再把这个概念拿出来单独说说.</p><p>Kafka的ack机制实际上指的是生产者的ack配置,不同的配置对消息的处理方式不同,配置得越严格消息越不容易丢失,主要有以下几种配置:</p><ul><li><p><code>ack=0</code>,消息一旦发送出去,就认为是发送成功了,即使Broker没有接收到消息.</p></li><li><p><code>ack=1</code>,一旦首领接收到消息,那么会收到发送成功的响应.但是首领有可能在消息同步到其它副本前发生崩溃,其它副本成为新的首领(即使禁用了不完全的首领选举),所以这个配置还是有可能导致消息丢失的.</p></li><li><p><code>ack=all</code>,这里的all等于Broker端配置的<code>min.insync.replicas</code>的个数,如果有等于这个个数的副本接收到消息,才能收到成功响应,但是要保证消息不可能丢失,应该是要保证所有副本都能收到消息,所以要使得<code>min.insync.replicas</code>等于副本个数.</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kafka消息丢失和消息重复,解决方案</title>
    <link href="/2021/06/30/Kafka%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%87%8D%E5%A4%8D/"/>
    <url>/2021/06/30/Kafka%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%92%8C%E6%B6%88%E6%81%AF%E9%87%8D%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kafka什么时候出现消息丢失和消息重复-解决方案"><a href="#Kafka什么时候出现消息丢失和消息重复-解决方案" class="headerlink" title="Kafka什么时候出现消息丢失和消息重复,解决方案"></a>Kafka什么时候出现消息丢失和消息重复,解决方案</h2><p>消息队列的参与者无非是三个:生产者、Broker以及消费者.消息丢失和消息重复在这三个参与者当中都会出现,本篇文章以这三者的角度来叙述消息丢失和消息重复问题.</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h4><p>如果生产者往Broker发送消息,没有等到Broker的回复,就认为是成功了,那么就可能存在生产者的消息丢失.可能由于网络原因导致消息没有到达Broker或是其它一些异常情况.生产者发送消息有一个发送确认的概念,使用<code>ack</code>来进行配置.</p><ul><li>当设置<code>ack=0</code>时,消息一旦从生产者端发送出去就认为是成功了.这种情况就很有可能出现消息丢失.</li><li>当设置<code>ack=1</code>时,会等到首领收到消息,并返回结果才算是发送成功.这种情况认为生产者已经发送成功了,对于生产者端来说不会出现消息丢失,而对于Broker来说可能存在消息丢失,主要和同步副本有关系,这个将在下面讲解.</li><li>当设置<code>ack=all</code>时,会等到首领及首领配置的最小同步副本都接收到消息,那么才算是发送成功,Broker通过<code>min.insync.replics</code>来进行配置,比如这个属性配置成2,那么要至少有2个Broker接收到消息才算成功,不会出现消息丢失,除此之外更加严格的确保消息在副本之间的一致性.</li></ul><p>所以如果要让消息不丢失,那么可以设置ack=1或者ack=all.</p><h4 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h4><p>消息重复是无法避免的情况,即使消息真正存放到Broker之中,Broker返回的响应结果也有可能由于网络原因出现丢失或者超时的可能性.这个时候生产者误以为自己没有发送成功,那么就有可能会重试发送消息,Broker再次接收到消息,那么消息就发生了重复.</p><p>这种消息重复只能在Broker端或者消费者端做逻辑上的去重处理.</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><h4 id="消息丢失-1"><a href="#消息丢失-1" class="headerlink" title="消息丢失"></a>消息丢失</h4><p>在Broker端存在三个很重要的概念:复制系数,不完全的首领选举及最小同步副本.</p><h5 id="复制系数"><a href="#复制系数" class="headerlink" title="复制系数"></a>复制系数</h5><p>复制系数表示一个分区有多少个副本,通过<code>replication.factor</code>来进行配置,很明显这个值配置得越大,消息越不容易丢失,但是复制带来的性能损耗也越大.</p><h5 id="不完全的首领选举"><a href="#不完全的首领选举" class="headerlink" title="不完全的首领选举"></a>不完全的首领选举</h5><p>不完全的首领选举表示在进行首领选举时,是否允许非同步副本成为首领,一般通过<code>unclean.leader.election</code>进行配置,如果配置成<code>true</code>,那么可能出现首领宕机,但其它副本并没有同步完成时成为新的首领,那么就可能出现消息丢失.如果配置成<code>false</code>,那么分区在旧首领重启之前就是不可用的,这种情况不会出现消息丢失.</p><p>但是可能出现这么一种情况,消息写入到首领之后,还没有同步到其它副本中,此时首领宕机了,但是其它副本还是认为自己是同步的,还是会进行首领选举产生新首领,所以使用这个配置并不能完全防止消息丢失,只能认为它具有一定的防止消息丢失的作用.</p><h5 id="最小同步副本"><a href="#最小同步副本" class="headerlink" title="最小同步副本"></a>最小同步副本</h5><p>最小同步副本是在Broker端对消息同步副本个数的约束,一般通过<code>min.insync.replicas</code>进行配置.比如配置成2,那么要保证至少有两个同步副本时分区才能对外进行写服务,否则只能提供读服务,将最小同步副本设置成分区副本的总个数,那么在Broker端就不会出现消息丢失.</p><p>所以要让消息不丢失,可以禁用不完全的首领并且或者并且最小同步副本个数为分区副本个数.</p><h4 id="消息重复-1"><a href="#消息重复-1" class="headerlink" title="消息重复"></a>消息重复</h4><p>在Broker端出现消息重复的根本原因是生产者重复发送导致的.对于Broker来说,可以根据Broker本身提供的幂等功能来进行去重.</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="消息丢失-2"><a href="#消息丢失-2" class="headerlink" title="消息丢失"></a>消息丢失</h4><p>消费者一般通过轮询的方式来获取消息,消息消费成功后就提交偏移量.如果消费者没有消费成功,但是提交了偏移量,那么就存在消息丢失的可能性,下一次拉取的消息就不会有本次消费失败的消息.</p><p>对于这种情况,要确保消息处理成功再提交偏移量,或者对于没有处理成功的消息,保存到数据库或者缓存中,稍后再进行处理.</p><h4 id="消息重复-2"><a href="#消息重复-2" class="headerlink" title="消息重复"></a>消息重复</h4><p>消费者如果没有成功提交偏移量或者提交了已处理成功的消息的偏移量,那么就有可能导致消息重复.对于这种情况,要确保消息处理和偏移量提交的原子性(将偏移量作为数据库表的列,通过事务处理),或者在处理消息前判断数据库中是否已经有该消息对应的记录.</p><p>除此之外,如果Broker没有对重复的消息进行去重,消费者也置之不理,那么也会出现消息重复.对于这种情况,要根据业务标识做幂等处理.</p>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper节点类型及特点</title>
    <link href="/2021/06/30/Zookeeper%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <url>/2021/06/30/Zookeeper%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E5%8F%8A%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Zookeeper节点类型及特点"><a href="#Zookeeper节点类型及特点" class="headerlink" title="Zookeeper节点类型及特点"></a>Zookeeper节点类型及特点</h2><p>Zookeeper共有四种节点类型:</p><ul><li><p>持久节点.持久节点指的是在Zookeeper上进行持久化的节点,除非主动进行删除,否则节点会一直存在.</p></li><li><p>持久顺序节点.在持久节点的基础上,添加了顺序.比如创建一个持久节点,那么会自动的在路径的末尾添加一个序列号.比如连续创建两次/A/B,并表示创建的是顺序节点,那么会创建<code>/A/B0000000000</code>和<code>/A/B0000000001</code>这两个持久顺序节点,如果创建的是/A/C,那么会创建<code>/A/C0000000002</code>,这是因为有一个父节点在维护这些顺序节点的顺序(从0开始递增),只要是创建带有顺序的子节点,都会使用这个顺序来作为节点的后缀.</p></li><li><p>临时节点.临时节点指的是会话结束后会被删除的节点.临时节点不能有子节点,所以临时节点一定是叶子节点.</p></li><li><p>临时顺序节点.在临时节点的基础上,添加了顺序,其创建出来的节点路径规律和持久顺序节点是类似的.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>zookeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAP定理</title>
    <link href="/2021/06/29/CAP%E5%AE%9A%E7%90%86/"/>
    <url>/2021/06/29/CAP%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>CAP定理指的是在分布式环境中,只可能满足一致性、可用性、分区容错性中的其中两个,不可以三个都满足.</p><p>一致性:这里的一致性指的是强一致性,如果节点有副本,那么一旦一个节点的数据进行更新之后,那么在另外一个节点能立即获取到更新后的值.</p><p>可用性:可用性指的是在有限的时间返回正确的结果.对于不同系统来说,有限的时间是根据具体的应用场景来定义的一个合理的指标,比如对于搜索引擎而言,这个有限的时间就是一个比较短暂的时间,比如100ms.对于一个离线处理任务来说,可能长达几分钟或者几个小时.正确的结果是一个对用户来说看的懂或者说有意义的结果,比如下单成功或失败,而不是<code>NullPointer Exception</code>这种结果.</p><p>分区容错性:网络分区指的是两个网络之间由于网络问题,导致不同节点无法进行通信,各自形成一个子网络.分区容错性指的是即使出现网络分区,系统也能提供具有一致性和可用性的服务.</p><p>因为是在分布式环境下,那么网络分区是一个必然会出现的问题,所以在设计系统时,一般考虑的是系统的一致性和可用性.</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式环境中的问题</title>
    <link href="/2021/06/29/%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/29/%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分布式环境中的问题"><a href="#分布式环境中的问题" class="headerlink" title="分布式环境中的问题"></a>分布式环境中的问题</h2><p>现在几乎所有的软件都是分布式环境,那么分布式环境有什么问题呢?</p><ul><li><p>通信问题.如果是单体应用,那么所有的程序逻辑都会在一台机器上进行处理,一般不会出现网络通信问题.但是在分布式环境,会涉及到不同机器之间的通信,所以可能会出现类似网络丢包等问题.</p></li><li><p>机器故障.故障一般指的是机器宕机或者僵死.如果是单体应用,那么故障之后会造成服务不可用,重启之后又可以继续进行服务.在分布式环境下,故障问题就可能发生在所有的机器上.</p></li><li><p>网络分区.在分布式环境中,机器可能部署在不同的网络环境中,有可能出现机器本身运行正常但网络出现分区的情况,即两个网络之间的通信链路出现了问题.</p></li><li><p>三态问题.如果是单体应用,那么一般来说一个请求的处理结果要么是成功或者失败.如果是分布式环境,那么可能由于网络原因出现第三种处理结果-超时.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper和Redis实现分布式锁的区别</title>
    <link href="/2021/06/29/Zookeeper%E5%92%8CKafka%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/06/29/Zookeeper%E5%92%8CKafka%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Zookeeper和Redis实现分布式锁的区别"><a href="#Zookeeper和Redis实现分布式锁的区别" class="headerlink" title="Zookeeper和Redis实现分布式锁的区别"></a>Zookeeper和Redis实现分布式锁的区别</h2><p>在网上看了关于Zookeeper和Redis实现分布式锁的区别的一些文章,感觉可能有的文章写的这两者的区别可能跟我的理解有点出入,所以这里按照自己的理解来谈谈它们的区别:</p><ul><li><p>Zookeeper实现分布式锁时,除了可以使用和redis类似的独占锁的思路,还可以监听节点变更事件,在锁可能可以获取到的情况下通知客户端再次获取锁.</p></li><li><p>Redis在获取锁时,可能需要设置过期时间,而Zookeeper通常是设置一个临时节点,在会话过期的时候自动释放锁.</p></li></ul><p>还有一些其它区别暂时还没有学习到,可能是一些算法设计或者一致性方面的内容,如果以后涉及到这部分内容,再进行补充.</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2021/06/25/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/06/25/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式解决的是一种关于发布/订阅的场景,是观察者和通知者的一种交互方式.举个例子:现在很流行订阅APP的消息,那么APP就相当于通知者,我们的手机相当于观察者,当APP有消息要发布时,会遍历所有它的观察者进行消息的发送.在实际编码中,我们在描述这种关系时可能要注意将观察者抽象化,或者将通知者抽象化,如果不抽象化我们也能描述这种发布/订阅的关系,只不过代码的扩展性比较差.</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><a href="https://github.com/CodeShowZz/code-repository/tree/master/design-pattern-demo/src/main/java/com/observer">https://github.com/CodeShowZz/code-repository/tree/master/design-pattern-demo/src/main/java/com/observer</a></p><p>这里有一个简单的代码示例,将观察者和通知者进行了一定的抽象,实际应用场景中可以是使用接口进行抽象,或者使用抽象类进行抽象,总之就是代码的具体实现可能是多种多样的,重要的事情在于要把模式体现出来和要使程序具有扩展性即可,不能拘泥于某种代码写法.</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2021/06/25/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/06/25/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是最简单的设计模式,它用来解决一个类只可以有一个唯一实例的问题,该类提供一个访问该实例的方法.单例模式需要注意的一个点是要保证在多线程的环境下,也能保证单例.</p><h3 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h3><p>如果我们在需要单例的情况再去初始化它,则叫做懒汉式单例.</p><p>通常我们会这么写一个单例模式:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">Singleton</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Singleton <span class="hljs-function"><span class="hljs-title">getSingleton</span>(<span class="hljs-params"></span>)</span> &#123;<br>        synchronized (Singleton.class) &#123;<br>            <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">singleton == <span class="hljs-literal">null</span></span>)</span> &#123;<br>                singleton = <span class="hljs-keyword">new</span> Singleton();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这么做有一个坏处,就是每次都会有锁的开销,进而有人发明了双重检查的写法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton2</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton2 singleton;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">Singleton2</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Singleton2 <span class="hljs-function"><span class="hljs-title">getSingleton</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">singleton ==<span class="hljs-literal">null</span></span>)</span> &#123;<br>            synchronized (Singleton2.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> Singleton2();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>但是这种写法是有问题的,这里主要的问题在于可见性问题,有可能A线程执行了new操作,但是对象没有完全被构建,B线程获取到了这个没有完全被构建完成的对象,这样是不安全的.进而有大神发明了一个更牛逼的写法:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonFactory</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton3 <span class="hljs-title">getSingleton</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.singleton3;<br>    &#125;<br>    <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SingletonHolder</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton3 singleton3 = <span class="hljs-keyword">new</span> Singleton3();<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton3</span> &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton3</span>(<span class="hljs-params"></span>)</span> &#123;<br>           <br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法能做到懒加载方式,又能保证线程安全,堪称单例模式的最佳写法.</p><h3 id="恶汉式"><a href="#恶汉式" class="headerlink" title="恶汉式"></a>恶汉式</h3><p>如果我们在程序的初始阶段就实例化单例,则叫做恶汉式单例.</p><p>写法也是简单粗暴:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton4</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Singleton4 singleton = <span class="hljs-keyword">new</span> Singleton4();<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton4</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Singleton4 <span class="hljs-title">getSingleton</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac Os Open JDK编译</title>
    <link href="/2021/06/25/Mac%20Os%20Open%20JDK%E7%BC%96%E8%AF%91/"/>
    <url>/2021/06/25/Mac%20Os%20Open%20JDK%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Open-JDK编译"><a href="#Open-JDK编译" class="headerlink" title="Open JDK编译"></a>Open JDK编译</h2><p>我们经常都会看一些源码,但有没有想过动手修改源代码呢?在平时的开发环境中,是无法直接修改源码的,如果要修改源码,那么就要获取源代码进行编译,想象一下我们可以修改源码,然后在看源码的时候加上一些注释,仿佛成为JDK的开发人员那样,是不是很有意思?编译JDK是一个比较繁琐的过程,这里以Mac OS系统为例.</p><h3 id="第一步-下载Open-JDK11"><a href="#第一步-下载Open-JDK11" class="headerlink" title="第一步:下载Open JDK11"></a>第一步:下载Open JDK11</h3><ol><li><p>进入页面 <a href="https://adoptopenjdk.net/installation.html?variant=openjdk11&jvmVariant=hotspot#x64_mac-jdk">https://adoptopenjdk.net/installation.html?variant=openjdk11&amp;jvmVariant=hotspot#x64_mac-jdk</a> 下载 tar.gz 包</p></li><li><p>解压到/Library/Java/JavaVirtualMachines,如果你有其它版本的JDK则不需要设置环境变量,否则需要设置.</p></li></ol><h3 id="第二步-下载XCode"><a href="#第二步-下载XCode" class="headerlink" title="第二步:下载XCode"></a>第二步:下载XCode</h3><p>编译过程需要使用到XCode.在我的系统里面,App Store的XCode版本并不兼容我的系统,所以要找到兼容本系统的历史版本进行下载.可以在<a href="https://developer.apple.com/download/all/?q=Xcode%2011.7">https://developer.apple.com/download/all/?q=Xcode%2011.7</a>下载.</p><p><img src="/images/open_jdk_01.png" alt="xcode历史版本查看"></p><h3 id="第三步-下载Open-JDK11源码"><a href="#第三步-下载Open-JDK11源码" class="headerlink" title="第三步:下载Open JDK11源码"></a>第三步:下载Open JDK11源码</h3><p>在<a href="http://hg.openjdk.java.net/jdk-updates/jdk11u/">http://hg.openjdk.java.net/jdk-updates/jdk11u/</a>下载zip包,解压到一个英文目录中.</p><h3 id="第四步-编译"><a href="#第四步-编译" class="headerlink" title="第四步:编译"></a>第四步:编译</h3><p>进入到下载的jdk源码目录中,使用命令<code>sh configure --with-target-bits=64 --enable-ccache --with-jvm-variants=server  --with-boot-jdk-jvmargs=&quot;-Xlint:deprecation -Xlint:unchecked&quot; --disable-warnings-as-errors --with-debug-level=slowdebug 2&gt;&amp;1 | tee configure_mac_x64.log </code>进行编译.</p><p>在我的实际编译中,遇到了这样一个错误:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">configure: error: <span class="hljs-literal">No</span> xcodebuild<span class="hljs-built_in"> tool </span><span class="hljs-keyword">and</span> <span class="hljs-literal">no</span><span class="hljs-built_in"> system </span>framework headers found, use --with-sysroot <span class="hljs-keyword">or</span> --with-sdk-name <span class="hljs-keyword">to</span> provide a path <span class="hljs-keyword">to</span> a valid SDK<br>/Users/huangjunlin/IdeaProjects/jdk11u-113c646a33d2/build/.configure-support/generated-configure.sh: line 82: 5: Bad file descriptor<br></code></pre></td></tr></table></figure><p>此时应执行<code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</code>后再运行上面的命令.如果编译成功,将出现类似如下代码输出:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Build performance summary:</span><br><span class="hljs-string">*</span> <span class="hljs-attr">Cores to use:</span>   <span class="hljs-number">4</span><br><span class="hljs-string">*</span> <span class="hljs-attr">Memory limit:</span>   <span class="hljs-number">8192 </span><span class="hljs-string">MB</span><br><span class="hljs-string">*</span> <span class="hljs-attr">ccache status:</span>  <span class="hljs-string">Active</span> <span class="hljs-string">(3.7.1)</span><br></code></pre></td></tr></table></figure><p>之后在这个目录使用<code>make</code>命令进行编译,整个过程可能会耗费一定时间,如果执行命令有问题,记得先加上<code>sudo</code>进行尝试,还有就是如果卡在某个地方,请耐心等待,大部分情况最终都会向下执行的,不要一开始就认为它挂了.等到出现</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">Finished building <span class="hljs-keyword">target</span> <span class="hljs-string">&#x27;default (exploded-image)&#x27;</span> in configuration <span class="hljs-string">&#x27;macosx-x86_64-normal-server-slowdebug&#x27;</span><br></code></pre></td></tr></table></figure><p>在build目录出现<code>macosx-x86_64-normal-server-slowdebug/jdk</code>文件夹,那么编译就完成了.</p><h3 id="第五步-指定Idea的JDK"><a href="#第五步-指定Idea的JDK" class="headerlink" title="第五步:指定Idea的JDK"></a>第五步:指定Idea的JDK</h3><p>创建一个Idea项目,在Idea的<code>Project Structure</code>指定SDK为刚刚编译出来的jdk,路径类似为<code>/jdk11u-113c646a33d2/build/macosx-x86_64-normal-server-slowdebug/jdk</code>.</p><h3 id="第六步-下载CLion"><a href="#第六步-下载CLion" class="headerlink" title="第六步:下载CLion"></a>第六步:下载CLion</h3><p>Clion是一个C/C++的一个开发工具,我们要修改JDK的源码,可以借助这个工具来进行修改,这个工具跟Idea的风格很像,下载也很简单.下载完成之后,使用它打开<code>jdk11u-113c646a33d2/src</code>目录,我们就是在导入的文件中修改源码.</p><h3 id="第七步-修改源码并测试"><a href="#第七步-修改源码并测试" class="headerlink" title="第七步:修改源码并测试"></a>第七步:修改源码并测试</h3><p>找到<code>java.c</code>文件,添加一条输出语句,片段如下:</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-built_in">int</span><br><span class="hljs-type">JavaMain</span>(void* _args)<br>&#123;<br>    <span class="hljs-type">JavaMainArgs</span> *args = (<span class="hljs-type">JavaMainArgs</span> *)_args;<br>    printf(<span class="hljs-string">&quot;修改open jdk&quot;</span>);<br>    <span class="hljs-built_in">int</span> argc = args-&gt;argc;<br>    <span class="hljs-built_in">char</span> **argv = args-&gt;argv;<br>    <span class="hljs-built_in">int</span> mode = args-&gt;mode;<br>    <span class="hljs-built_in">char</span> *what = args-&gt;what;<br>    <span class="hljs-type">InvocationFunctions</span> ifn = args-&gt;ifn;<br></code></pre></td></tr></table></figure><p>重新运行<code>make</code>命令,进行重新编译,这次编译速度相对来说会比较快.然后在Idea用<code>main</code>方法进行测试:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>         <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果输出了<code>修改open jdk</code>;</p><p>在网上还有一些关于在Clion打断点的文章,但好像对.java上打断点没有过多的描述,我认为对看源码参考价值不大,这部分内容后续还要再研究一下.</p><p>感觉整个过程遇到了好多坑,编译JDK还是比较麻烦的.</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其它</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java锁的优化</title>
    <link href="/2021/06/24/%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <url>/2021/06/24/%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Java锁的优化"><a href="#Java锁的优化" class="headerlink" title="Java锁的优化"></a>Java锁的优化</h2><p>在JDK6,Java对synchronized进行了大量的改进,包括适应性自旋,锁膨胀,轻量级锁,偏向锁.</p><h3 id="自适应自旋"><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h3><p>自旋指的是当线程获取不到锁的时候,不用直接进入挂起状态,而是执行一个忙循环,如果在忙循环结束之后能获取到锁,那么就可以减少线程切换的开销.自适应自旋通过统计自旋相关的一些参数信息,从而动态的调整执行忙循环的次数,甚至有可能跳过自旋过程.</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>如果在一个方法内部声明一个对象,并且这个对象不可能被外部的方法所访问到,但是这个对象的一些方法可能有关于锁的一些操作,这样可能会降低程序运行的性能.所以在即时编译器检查到这类操作时,会将这些关于锁操作的代码消除掉.</p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>通常来说,将锁的粒度控制得小一点是一个不错的做法,但是如果某些操作,频繁的用同一个对象进行加锁和解锁,那还不如将锁的范围扩大,这就是锁粗化.</p><h3 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h3><p>这部分内容还有一些疑问没有搞清楚,留待以后补充</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4>]]></content>
    
    
    <categories>
      
      <category>并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock和Synchronized的区别</title>
    <link href="/2021/06/24/ReentrantLock%E5%92%8CSynchronized/"/>
    <url>/2021/06/24/ReentrantLock%E5%92%8CSynchronized/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ReentrantLock和Synchronized的区别"><a href="#ReentrantLock和Synchronized的区别" class="headerlink" title="ReentrantLock和Synchronized的区别"></a>ReentrantLock和Synchronized的区别</h2><p>有了Synchronized,为什么还要有ReentrantLock呢?这是因为在某些特定的场景,Synchronized无法提供很好的灵活性,而ReentrantLock提供了一些更高级的功能,但是同时也有一些缺点.</p><p>两者主要的区别如下:</p><ul><li>ReentrantLock可以在获取锁失败时立即退出或者在一段时间内等待锁的获取,可以防止锁顺序死锁,而Synchronized不能.</li><li>ReentrantLock可以在等待获取锁的时候响应中断,而Synchronized不能.</li><li>ReentrantLock要手动释放锁,而Synchronized能自动释放锁.</li><li>在JDK5时,ReentrantLock的性能比Synchronized好.从JDK6开始,两者性能差不多.</li><li>Synchronized是非公平锁,ReentrantLock既可以是公平锁,也可以是非公平锁.</li></ul><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>应该优先考虑使用Synchronized,因为它能够自动释放锁,这样能降低危险性.只有在需要一些高级功能时,才应该考虑ReentrantLock.</p>]]></content>
    
    
    <categories>
      
      <category>并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM运行时数据区域</title>
    <link href="/2021/06/24/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
    <url>/2021/06/24/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h2><p>JVM运行时数据区域如下图所示:</p><p><img src="/images/jvm_runtime_area_01.png" alt="JVM运行时数据区域"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器是线程私有的,指向当前线程执行的字节码行号,当线程挂起后恢复,就是通过这个计数器来知道下一条指令的执行位置.</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>Java虚拟机栈是线程私有的,在方法执行的时候,会在线程中创建一个栈帧,存放局部变量表、操作数栈、动态连接、方法出口等信息,每个方法的调用到执行完毕对应栈帧的入栈和出栈过程.</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈是线程私有的,和Java虚拟机栈相似,区别在于它为Native方法服务.</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>堆是线程共享的,几乎所有的对象实例都是分配在Java堆上,另外从JDK7开始,本位于方法区的字符串常量池已经移动到了堆上.</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是线程共享的,用来存放虚拟机加载的类型信息.运行时常量池是方法区的一部分,编译期生成的各种字面量和符号引用在类加载后会存放到运行时常量池中.</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>这部分区域并不属于JVM运行时数据区域,但是JAVA里的部分技术可能使用到这部分内存,如NIO,通过Native函数库直接分配堆外内存,所以在使用时要考虑本机总内存的大小.</p>]]></content>
    
    
    <categories>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM垃圾收集器</title>
    <link href="/2021/06/24/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <url>/2021/06/24/jvm%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JVM垃圾收集器"><a href="#JVM垃圾收集器" class="headerlink" title="JVM垃圾收集器"></a>JVM垃圾收集器</h2><p>JVM垃圾收集器中比较经典的收集器如下图所示:</p><p><img src="/images/jvm_collectors_01.jpg" alt="jvm经典垃圾收集器"></p><p>从图中可以看到,经典垃圾收集器目前有7种,图片米色部分的是新生代收集器,浅绿色部分是老年代收集器,横跨两种颜色的G1既是新生代收集器又是老年代收集器.除了这几个收集器之外,还有一些新版本的低延迟垃圾收集器,比如Shenandoah和ZGC收集器.接下来介绍一下各个收集器.</p><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><p>Serial是新生代垃圾收集器,具有如下特点:</p><ul><li>采取标记复制算法进行垃圾回收</li><li>垃圾回收过程会暂停用户线程,并使用单个线程对垃圾进行回收</li></ul><p>Serial是串行的意思,名字很好的反映了该收集器的特点.</p><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><p>Serial Old是老年代垃圾收集器,具有如下特点:</p><ul><li>采取标记整理算法进行垃圾回收</li><li>垃圾回收过程会暂停用户线程,并使用单个线程对垃圾进行回收</li></ul><p>和上面的Serial收集器对比,该收集器不同的点就是工作在老年代,垃圾回收的算法不一样.</p><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>从名字中的New可以看出来这是一个新生代垃圾收集器,而名字中的Par代表的意思是并行,代表该收集器会同时开启多个线程来进行垃圾回收,所以可以把它认为是Serial收集器的并行回收版本,特点如下:</p><ul><li>采取标记复制算法进行垃圾回收</li><li>垃圾回收过程会暂停用户线程,并使用多个线程对垃圾进行回收</li></ul><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>这个收集器也是新生代收集器,其基本特点与ParNew一模一样,除此之外,还有其它特别之处,可以理解为ParNew的加强版.除了ParNew的两个特点之外,特别之处在于这是一个关注吞吐量的收集器,它可以设定两个参数来控制垃圾收集器的吞吐量.首先<code>吞吐量 = 运行用户代码时间/(运行用户代码时间+运行垃圾收集时间.)</code>第一个参数<code>-XX:MaxGCPauseMillis</code>来让垃圾收集器尽可能保证垃圾收集的停顿时间小于这个指定的时间.第二个参数<code>-XX:GCTimeRatio</code>指定了GC时间占垃圾回收时间的比值,计算方式为<code>GC占用时间比例=1/1+指定的值)</code>.除此之外,该收集器还提供了<code>-XX:UseAdaptiveSizePolicy</code>参数来根据运行情况收集性能信息来调整垃圾收集器的参数,这个叫做自适应调节策略.</p><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><p>从Old可以看出这是一个老年代收集器,其特点和Parallel Scavenge是一样的,不同之处在于它采用了标记整理算法来对老年代进行收集.</p><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>CMS是老年代收集器,是以低停顿为目标的垃圾收集器,采用标记清除算法来清除垃圾,运行过程如下:</p><ol><li>初始标记,标记GC Roots能直接关联到的对象,这个过程需要停顿用户线程.</li><li>并发标记,遍历整个对象图来标记能回收的对象,这个过程可以和用户线程一起并发执行</li><li>重新标记,这个过程标记的是在并发标记时产生的新的垃圾,相当于做一个修正,这个过程需要停顿用户线程</li><li>并发清除,这个过程清理标记了的对象,可以与用户线程一起并发执行.</li></ol><p>CMS被称为低停顿并发收集器,在上面耗时比较长的2和4过程中可以做到和用户线程一起执行,在耗时比较短的1和3过程需要停顿用户线程,总体来说可以认为整个过程是和用户线程一起并发执行,其思想是非常优秀的.但是由于这种设计,也有如下几个缺点:</p><ul><li><p>占用CPU资源.因为与用户线程一起并发执行,那么肯定会和用户线程一起抢占CPU的执行权,这样就会导致用户线程的吞吐量下降,尤其是在CPU核心数较少的情况下.</p></li><li><p>无法处理浮动垃圾.因为在垃圾清除阶段,用户线程还在运行,这个时候老年代可能会产生新的对象,如果这个时候无法找到足够的内存空间进行对象的分配,将会出现Concurrent Mode Failure,此时将会停顿用户线程,改用Serial Old垃圾收集器来进行垃圾回收,这样停顿的时间就更长了.默认情况下,CMS会预留一部分内存空间来分配新对象,可以通过参数<code>-XX:CMSInitiatingOccupancyFraction</code>来指定占用内存的比例为多少时触发CMS的垃圾回收.</p></li><li><p>内存碎片导致无法分配新对象.因为CMS是基于标记清除的垃圾收集器,这会导致它产生大量的内存碎片,可能导致无法找到一块内存去分配新的对象,那么就很容易导致触发FULL GC.所以CMS提供了一个<code>CompactAtFullCollection</code>参数来使得进行Full GC前先进行内存碎片的整理,尝试去找到一块空间来分配新对象,但是这个过程需要移动对象,所以会停顿用户线程.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>count(*),count(1),count(column name)的区别</title>
    <link href="/2021/06/23/count-count-1-count-column-name-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/06/23/count-count-1-count-column-name-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="count-count-1-count-column-name-的区别"><a href="#count-count-1-count-column-name-的区别" class="headerlink" title="count(*),count(1),count(column name)的区别"></a>count(*),count(1),count(column name)的区别</h2><h3 id="count-vs-count-1"><a href="#count-vs-count-1" class="headerlink" title="count(*) vs count(1)"></a>count(*) vs count(1)</h3><p><code>count(*)</code>和<code>count(1)</code>的功能还有性能是差不多的,这里面括号里面的参数只是一个标识符,如果发现有一行数据,那么就分配一个标识符,最后看有多少标识符而已.<code>count(1)</code>并不是说统计第一行的数据有多少个,<code>count(*)</code>也不是说要把一行的所有列都扫描一遍.如果你不信,你可以试试<code>count(-13)</code>,难道它统计的是-13列的个数?</p><p>那么它们具体是怎么去计算有多少条数据的呢?在只有主键索引的情况下,通过主键索引中索引的个数来计算有多少条数据.在有二级索引的情况下,通过二级索引中索引的个数来计算有多少条数据,如果有多个二级索引,用索引空间占用量小的二级索引来进行计算.</p><h3 id="count-vs-count-column-name"><a href="#count-vs-count-column-name" class="headerlink" title="count(*) vs count(column name)"></a>count(*) vs count(column name)</h3><p><code>count(*)</code>和<code>count(column name)</code>的区别在于<code>count(column name)</code>统计的是某一列字段的个数,其中字段值为NULL的不进行统计.</p><p>那么<code>count(column name)</code>是如何计算有多少条数据的呢?如果有<code>column name</code>对应的二级索引,那么就计算该二级索引的个数(字段值不为NULL).如果没有对应的二级索引,则扫描主键索引,通过判断行数据对应的<code>column name</code>是否为空来进行统计.</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ消息重投和消息重试</title>
    <link href="/2021/06/23/RocketMQ%E6%B6%88%E6%81%AF%E9%87%8D%E6%8A%95%E5%92%8C%E6%B6%88%E6%81%AF%E9%87%8D%E8%AF%95/"/>
    <url>/2021/06/23/RocketMQ%E6%B6%88%E6%81%AF%E9%87%8D%E6%8A%95%E5%92%8C%E6%B6%88%E6%81%AF%E9%87%8D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RocketMQ消息重投和消息重试"><a href="#RocketMQ消息重投和消息重试" class="headerlink" title="RocketMQ消息重投和消息重试"></a>RocketMQ消息重投和消息重试</h2><h3 id="消息重投"><a href="#消息重投" class="headerlink" title="消息重投"></a>消息重投</h3><p>消息重投指的是生产者发送消息到Broker没有成功,然后进行重新发送.使用同步发送方式,当消息发送失败时,默认最多会重试两次,并且重试时会选择不同的Broker来进行消息的发送.</p><h3 id="消息重试"><a href="#消息重试" class="headerlink" title="消息重试"></a>消息重试</h3><p>消息重试指的是消费者在消费消息时失败,然后重新消费消息.每个消费组都有一个Topic名称为“%RETRY%+consumerGroup”的重试队列,当消息消费失败时,将根据具体的重试级别来进行重试,默认是重试16次,并且每次的重试时间间隔逐步递增.</p>]]></content>
    
    
    <categories>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么保证RocketMQ消息不丢失</title>
    <link href="/2021/06/21/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81RocketMQ%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/"/>
    <url>/2021/06/21/%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81RocketMQ%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="怎么保证RocketMQ消息不丢失"><a href="#怎么保证RocketMQ消息不丢失" class="headerlink" title="怎么保证RocketMQ消息不丢失"></a>怎么保证RocketMQ消息不丢失</h2><p>要保证RocketMQ消息不丢失,需要生产者、Broker以及消费者的配合.</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>生产者在发送消息时,如果没有收到服务器的成功响应,那么就要重试发送消息,直到消息发送成功.</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Broker要做的事情是保证消息不丢失,当接收到生产者发送的消息时,Broker为了保证消息不丢失,会将数据同步到磁盘中,为了做到真正意义上的不丢失,需要Broker设置同步刷盘模式,必须要等到数据真的同步到磁盘上之后,再向客户端返回消息发送成功状态.</p><p>除此之外,为了提高服务的可用性,Broker通常会采用主从模式,这个时候还要保证消息真正同步到了从服务器上,需要设置主从服务器复制策略为同步复制模式,等到所有的从服务器都真正接收到数据并存储到磁盘时,再向客户端返回消息发送成功状态.</p><p>总结起来就是两点:</p><ul><li>Master保证数据同步到磁盘</li><li>Slava保证数据同步到磁盘</li></ul><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>对于消费者而言,消息不丢失意味着能够成功消费到所有消息.正常情况下,消费者成功消费之后,再向Broker返回成功消费信息,否则返回消费失败信息,使得下次还能够重新消费那些没有消费成功的消息.</p><h3 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h3><p>为了保证消息不丢失,需要使用大量的同步策略,这样可能导致效率的低下,所以在实际生产环境中还需要结合实际业务进行权衡.</p>]]></content>
    
    
    <categories>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka和RocketMQ的区别</title>
    <link href="/2021/06/21/Kafka%E5%92%8CRocketMQ%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/06/21/Kafka%E5%92%8CRocketMQ%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kafka和RocketMQ的区别"><a href="#Kafka和RocketMQ的区别" class="headerlink" title="Kafka和RocketMQ的区别"></a>Kafka和RocketMQ的区别</h2><table><thead><tr><th align="center"></th><th align="center">RocketMQ</th><th align="center">Kafka</th></tr></thead><tbody><tr><td align="center">协议和规范</td><td align="center">拉取模式,支持TCP、JMS、OpenMessage</td><td align="center">拉取模式,支持TCP</td></tr><tr><td align="center">消息顺序</td><td align="center">保证严格的消息顺序,并且可以优雅扩展</td><td align="center">保证分区消息顺序</td></tr><tr><td align="center">批量消息</td><td align="center">支持,使用同步模式来避免消息丢失</td><td align="center">支持,使用异步生产者</td></tr><tr><td align="center">广播消息</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">消息过滤</td><td align="center">支持,使用基于SQL92的属性过滤表达式</td><td align="center">支持,使用Kafka Stream过滤消息</td></tr><tr><td align="center">服务端触发重新发送消息</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">消息追溯</td><td align="center">支持偏移量和时间戳指定</td><td align="center">支持偏移量指定</td></tr><tr><td align="center">高可用</td><td align="center">使用主从模式</td><td align="center">使用Zookeeper</td></tr><tr><td align="center">消息追踪</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">服务端重新发送消息</td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis分布式锁</title>
    <link href="/2021/06/21/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2021/06/21/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h2><p>分布式锁主要用来解决分布式环境下资源的互斥访问,这篇文章就来介绍一下分布式锁.</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>首先要保证获取锁和释放锁的正确性,通常来说就是保证获取锁和释放锁的原子性,一般会使用<code>SETNX key 唯一标识</code>命令来获取锁,在Lua脚本中通过唯一标识来释放锁,这样能保证获取锁和释放锁的客户端是同一个.</p><h3 id="考虑宕机"><a href="#考虑宕机" class="headerlink" title="考虑宕机"></a>考虑宕机</h3><p>当客户端服务获取到锁之后挂掉了,那么锁可能永远都没办法被另外的客户端获取到,所以此时要考虑给锁加一个过期时间,保证客户端服务挂掉之后锁也能释放,通常使用<code>SETNXEXPIRE key 唯一标识 过期时间</code>来实现.</p><h3 id="考虑可用性"><a href="#考虑可用性" class="headerlink" title="考虑可用性"></a>考虑可用性</h3><p>假如我们的Redis实例只有一个,那么有可能Redis实例挂了,那么分布式锁服务就不可用了,所以我们现在要想办法提高可用性.一个比较可靠的方式是使用RedLock算法.</p><h4 id="RedLock算法"><a href="#RedLock算法" class="headerlink" title="RedLock算法"></a>RedLock算法</h4><p>假设我们有5个Redis实例,彼此是独立的,那么RedLock的算法的运作过程如下:</p><ol><li><p>向各个Redis实例获取锁(<code>SETNXEXPIRE key 唯一标识 过期时间</code>),并且需要设置一个获取锁的超时时间(通常远远小于锁的过期时间),如果在这个超时时间之内没有获取到锁,那么则向另外的Redis实例获取锁.</p></li><li><p>当获取到锁的时间小于锁的失效时间,并且有超过半数的Redis实例上成功获取到锁时,锁才算获取成功.</p></li><li><p>如果锁没有获取成功(在锁过期前没有获取到锁或者没有在超过半数的实例上获取到锁),那么向所有的Redis实例进行一个解锁操作,即使某个Redis实例上并没有成功获取到锁.</p></li></ol><h3 id="持久化对分布式锁的影响"><a href="#持久化对分布式锁的影响" class="headerlink" title="持久化对分布式锁的影响"></a>持久化对分布式锁的影响</h3><p>假如我们没有使用持久化,那么实例重启之后key就会消失,其它服务就有可能获取到锁.比如本来在5台机器中的3台中成功获取到锁,此时挂掉一台,那么重启后没有设置key的实例就变成了3台(半数以上),其他的请求就可能获取到锁.为了保证可靠性,需要开启持久化模式,并设置<code>fsync=always</code>来保证数据不丢失.</p><h3 id="锁失效了怎么办"><a href="#锁失效了怎么办" class="headerlink" title="锁失效了怎么办"></a>锁失效了怎么办</h3><p>还有这样一个问题,假如我们获取到锁之后,做一个业务操作,这个业务操作在超过了锁的失效时间前还没有完成,那么其它的请求就有可能获取到分布式锁,这样破坏了锁的安全性.针对这种情况,可以在业务操作没有完成之前对锁的失效时间做一个延长,主要的步骤如下:</p><ol><li>获取到分布式锁</li><li>在获取到锁的机器上开启定时任务,根据唯一标识对获取到的key延长过期时间(使用lua脚本).</li><li>等到操作完成之后,我们就会释放该锁,这样这个key不可能再延长过期时间.</li></ol><p>通过这种方式,可以保证在业务操作完成之前,锁不会被释放.另外由于这个定时任务是在获取锁的机器上开启的,那么当这台机器挂了之后,也不会有定时任务对这个key进行一个过期时间的延长,还是可以满足机器挂掉之后key能够在过期时间到来时释放.</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis缓存穿透、雪崩、击穿</title>
    <link href="/2021/06/21/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E3%80%81%E5%87%BB%E7%A9%BF/"/>
    <url>/2021/06/21/Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E3%80%81%E5%87%BB%E7%A9%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis缓存穿透、雪崩、击穿"><a href="#Redis缓存穿透、雪崩、击穿" class="headerlink" title="Redis缓存穿透、雪崩、击穿"></a>Redis缓存穿透、雪崩、击穿</h2><p>这篇文章介绍Redis缓存穿透、雪崩、击穿问题及解决方案.</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透指的是存储层(如mysql)不存在相应的数据,此时如果根据key进行查询,那么在缓存层查找不到数据,所有的这类查询最终都会访问存储层,相当于缓存层是没有用的.出现缓存穿透的原因主要有以下两点:</p><ul><li>恶意攻击 </li><li>业务代码问题</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>对于缓存穿透主要有两种解决方案.</p><ul><li><p>缓存空值,并设置一定的过期时间.在存储层查询不到数据后,在缓存层设置key对应的值为空,当下一次访问时,那么将直接从缓存层返回空对象,设置一定的过期时间是为了能够在存储层数据更新时,缓存层数据也可以得到更新.</p></li><li><p>使用布隆过滤器.通过对存储层数据对应的key进行扫描,将其放置在布隆过滤器中,因为布隆过滤器判断key是否存在的效率很高.在获取数据时,先判断布隆过滤器中是否存在该key,存在的话则访问缓存层,缓存层找不到的话再去访问存储层.</p></li></ul><h3 id="缓存击穿和热点Key问题"><a href="#缓存击穿和热点Key问题" class="headerlink" title="缓存击穿和热点Key问题"></a>缓存击穿和热点Key问题</h3><p>缓存击穿指的是缓存层的key过期之后,将会访问存储层进行缓存层数据的重建.这是一个正常的现象,只不过如果一个key属于热点key,对于这个key的请求量有几百上千万,那么当key过期了,还没来得及重建缓存层数据时,大量请求都会访问存储层来重建缓存,那么这样就会给存储层带来很大压力,我们主要讨论的就是缓存击穿中的热点Key问题.</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>对于热点key问题,主要有两种解决方案.</p><ul><li><p>分布式锁更新缓存.当缓存失效时,使用分布式锁让其中一个请求去重建缓存,其它请求进行等待,直到缓存数据重建完成.这种方式的优点是能保证缓存层和数据层的数据一致性,缺点是如果重建缓存时间太长,则会使服务阻塞.</p></li><li><p>不给key设置过期时间.当一个请求到来时,由于key没有设置过期时间,那么总能从缓存层获取到数据.然后为了保证数据能及时得到更新,我们会设置一个逻辑过期时间,当请求到来时,如果发现时间已经到达逻辑更新时间,那么我们会异步的对缓存进行重建.这样做的优点是够最大程度的解决热点key问题,缺点是数据一致性无法得到保证.</p></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩指的是缓存层服务不可用,这种情况就相当于没有缓存层,此时对数据的请求直接就涌向了存储层,可能导致存储层也不可用.</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>解决缓存雪崩的方案主要有以下几种:</p><ul><li><p>保证缓存层的高可用性.对于Redis来说,比如可以使用主从、哨兵等方式.</p></li><li><p>使用降级组件来使得服务不可用时,及时响应服务请求,比如使用Java的Hystrix.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Class文件分析</title>
    <link href="/2021/06/18/JVM%E7%B1%BB%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2021/06/18/JVM%E7%B1%BB%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Java-Class文件分析"><a href="#Java-Class文件分析" class="headerlink" title="Java Class文件分析"></a>Java Class文件分析</h2><p>这篇文章的主要目的是要分析Java编译后的Class文件的组成结构,以此来加深对Class文件的理解.</p><h3 id="将Class文件转换成十六进制"><a href="#将Class文件转换成十六进制" class="headerlink" title="将Class文件转换成十六进制"></a>将Class文件转换成十六进制</h3><p>如果是使用Idea进行开发,可以安装插件HexView来进行分析,直接在Class文件上点击右键使用HexView来展示即可.比如有这么一个java类:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestClass</span>(<span class="hljs-params"></span>)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">inc</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.m + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用HexView之后,解析的十六进制格式如下：<br><img src="/images/java_class_file_01.png" alt="java class 文件十六进制格式"></p><h3 id="Class文件分析"><a href="#Class文件分析" class="headerlink" title="Class文件分析"></a>Class文件分析</h3><p>我们将通过分析上面的这张图片来分析类文件的组成.</p><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>可以看到,图片的前四个字节为<code>ca fe ba be</code>(咖啡宝贝),是设计者用来表示Class文件格式的方式,因为通过文件后缀来表示Class文件格式不够安全,所以使用了这种方式.</p><h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h4><p>第五个字节和第六个字节为<code>00 00</code>,这个表示次版本号,这个版本号因为用处不大,所以不关注.</p><p>第七个字节和第八个字节<code>00 34</code>表示主版本号,对应JDK的不同版本,比如我的是JDK1.8,对应的主版本号为52.0(34的十进制),如果Class文件的主版本号大于JDK对应的主版本号,那么虚拟机将拒绝执行.</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>这部分比较复杂,留到后面再继续写</p><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>在常量池后面,有两个字节代表访问标志,识别类或接口等一系列访问信息,对应上图中<code>000000e0</code>行的<code>00 21</code>.目前有9个访问标志:</p><p><img src="/images/java_class_file_02.png" alt="upload successful"></p><p>这里重点在于理解其思想,所以只讲解21是如何得出来的.我们该类的哪些访问标志为真,然后把这些标志对应的标志值取出来,做一个<code>|</code>操作,即为最终的访问标志值.用上面的这个类来说,首先定义的这个类是<code>public</code>的,那么要将<code>ACC_PUBLIC</code>对应的标志值<code>0x0001</code>取出来,另外<code>ACC_SUPER</code>这个标志固定为真,所以也要取出来,其他的访问标志为假,所以最终结果为<code>0x0001 | 0x0020 = 0x0021</code>.</p>]]></content>
    
    
    <categories>
      
      <category>jvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Ribbon负载均衡</title>
    <link href="/2021/06/16/Spring-Cloud-Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/06/16/Spring-Cloud-Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring-Cloud-Ribbon负载均衡"><a href="#Spring-Cloud-Ribbon负载均衡" class="headerlink" title="Spring Cloud Ribbon负载均衡"></a>Spring Cloud Ribbon负载均衡</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@Loadbalanced</span><br>RestTemplate restTemplate;<br></code></pre></td></tr></table></figure><p>当我们在<code>RestTemplate</code>上面加上<code>@Loadbalanced</code>注解时,就轻而易举的指定了默认的负载均衡策略,那么还有哪些负载均衡策略呢?具体的实现原理是什么样子的?这篇文章就来分析一下Ribbon有哪些负载均衡策略以及负载均衡策略是如何实现的.</p><h3 id="负载均衡的大体过程"><a href="#负载均衡的大体过程" class="headerlink" title="负载均衡的大体过程"></a>负载均衡的大体过程</h3><p>负载均衡的过程主要做以下几件事:</p><ol><li>负载均衡器根据服务名称获取实例列表</li><li>负载均衡器根据负载均衡策略选中一个实例,获取该实例信息</li><li>根据实例信息的逻辑服务名重构URI,形成真实的地址</li><li>根据真实的访问服务器</li></ol><p>接下来,将对关键的方法进行叙述,代码很长,重点看注释部分.</p><p>当发送一个请求时,将会被<code>LoadBalancerInterceptor</code>类的<code>intercept</code>函数拦截,之后将会调用<code>LoadBalanceClient</code>的<code>execute</code>方法.</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function">ClientHttpResponse <span class="hljs-title">intercept</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request, <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] body, <span class="hljs-keyword">final</span> ClientHttpRequestExecution <span class="hljs-keyword">execution</span>)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        URI originalUri = request.getURI();<br>        String serviceName = originalUri.getHost();<br>        <span class="hljs-comment">//调用loadBalancer的execute方法</span><br>        <span class="hljs-keyword">return</span> (ClientHttpResponse)<span class="hljs-keyword">this</span>.loadBalancer.execute(serviceName, <span class="hljs-keyword">new</span> LoadBalancerRequest&lt;ClientHttpResponse&gt;() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-function">ClientHttpResponse <span class="hljs-title">apply</span><span class="hljs-params">(ServiceInstance instance)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                HttpRequest serviceRequest = LoadBalancerInterceptor.<span class="hljs-keyword">this</span>.<span class="hljs-function"><span class="hljs-keyword">new</span> <span class="hljs-title">ServiceRequestWrapper</span><span class="hljs-params">(request, instance)</span></span>;<br>                <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">execution</span>.<span class="hljs-title">execute</span><span class="hljs-params">(serviceRequest, body)</span></span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>而<code>LoadBalancerClient</code>的具体实现类为<code>RibbonLoadBalancerClient</code>,在<code>execute</code>方法中,将根据<code>serviceId</code>使用负载均衡策略从对应的实例列表中选出一台实例.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> &lt;T&gt; T execute(String serviceId, LoadBalancerRequest&lt;T&gt; request) throws IOException &#123;<br>ILoadBalancer loadBalancer = getLoadBalancer(serviceId);<br>        <span class="hljs-comment">//根据负载均衡器选择服务器</span><br>Server <span class="hljs-keyword">server</span> = getServer(loadBalancer);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">server</span> == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No instances available for &quot;</span> + serviceId);<br>&#125;<br>RibbonServer ribbonServer = <span class="hljs-keyword">new</span> RibbonServer(serviceId, <span class="hljs-keyword">server</span>, isSecure(<span class="hljs-keyword">server</span>,<br>serviceId), serverIntrospector(serviceId).getMetadata(<span class="hljs-keyword">server</span>));<br><br>RibbonLoadBalancerContext context = <span class="hljs-keyword">this</span>.clientFactory<br>.getLoadBalancerContext(serviceId);<br>RibbonStatsRecorder statsRecorder = <span class="hljs-keyword">new</span> RibbonStatsRecorder(context, <span class="hljs-keyword">server</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//回调,这一步将进行URI地址的转换</span><br>T returnVal = request.apply(ribbonServer);<br>statsRecorder.recordStats(returnVal);<br><span class="hljs-keyword">return</span> returnVal;<br>&#125;<br><span class="hljs-comment">// catch IOException and rethrow so RestTemplate behaves correctly</span><br><span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>statsRecorder.recordStats(ex);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>statsRecorder.recordStats(ex);<br>ReflectionUtils.rethrowRuntimeException(ex);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在经过一系列调用之后,将调用<code>RibbonLoadBalancerClient</code>的<code>reconstructURI</code>来重新构造URI,将形如ip:port的服务转换成<code>http://ip:port/接口名称</code>的形式,最终调用服务.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//重新构造URI</span><br>public URI reconstruct<span class="hljs-constructor">URI(ServiceInstance <span class="hljs-params">instance</span>, URI <span class="hljs-params">original</span>)</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Assert</span>.</span></span>not<span class="hljs-constructor">Null(<span class="hljs-params">instance</span>, <span class="hljs-string">&quot;instance can not be null&quot;</span>)</span>;<br>String serviceId = instance.get<span class="hljs-constructor">ServiceId()</span>;<br>RibbonLoadBalancerContext context = this.clientFactory<br>.get<span class="hljs-constructor">LoadBalancerContext(<span class="hljs-params">serviceId</span>)</span>;<br>Server server = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Server(<span class="hljs-params">instance</span>.<span class="hljs-params">getHost</span>()</span>, instance.get<span class="hljs-constructor">Port()</span>);<br>boolean secure = is<span class="hljs-constructor">Secure(<span class="hljs-params">server</span>, <span class="hljs-params">serviceId</span>)</span>;<br>URI uri = original;<br><span class="hljs-keyword">if</span> (secure) &#123;<br>uri = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UriComponentsBuilder</span>.</span></span>from<span class="hljs-constructor">Uri(<span class="hljs-params">uri</span>)</span>.scheme(<span class="hljs-string">&quot;https&quot;</span>).build<span class="hljs-literal">()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Uri()</span>;<br>&#125;<br>return context.reconstruct<span class="hljs-constructor">URIWithServer(<span class="hljs-params">server</span>, <span class="hljs-params">uri</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终再回到<code>LoadBalancerInterceptor</code>类的<code>intercept</code>方法,调用<br><code>ClientHttpRequestExecution</code>的<code>execute</code>调用服务.</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function">ClientHttpResponse <span class="hljs-title">intercept</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request, <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] body, <span class="hljs-keyword">final</span> ClientHttpRequestExecution <span class="hljs-keyword">execution</span>)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        URI originalUri = request.getURI();<br>        String serviceName = originalUri.getHost();<br>        <span class="hljs-keyword">return</span> (ClientHttpResponse)<span class="hljs-keyword">this</span>.loadBalancer.execute(serviceName, <span class="hljs-keyword">new</span> LoadBalancerRequest&lt;ClientHttpResponse&gt;() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-function">ClientHttpResponse <span class="hljs-title">apply</span><span class="hljs-params">(ServiceInstance instance)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                HttpRequest serviceRequest = LoadBalancerInterceptor.<span class="hljs-keyword">this</span>.<span class="hljs-function"><span class="hljs-keyword">new</span> <span class="hljs-title">ServiceRequestWrapper</span><span class="hljs-params">(request, instance)</span></span>;<br>                <span class="hljs-comment">//最终的服务调用</span><br>                <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">execution</span>.<span class="hljs-title">execute</span><span class="hljs-params">(serviceRequest, body)</span></span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><p>从上面的介绍中,我们已经知道负载均衡器是在<code>LoadBalancerClient</code>的<code>exetute</code>方法的下列代码片段中工作:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ILoadBalancer loadBalancer = getLoadBalancer(serviceId);<br>Server<span class="hljs-built_in"> server </span>= getServer(loadBalancer);<br></code></pre></td></tr></table></figure><p>所以接下来,我们来了解一下有哪些负载均衡器.</p>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ顺序消息</title>
    <link href="/2021/06/16/RocketMQ%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/"/>
    <url>/2021/06/16/RocketMQ%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RocketMQ顺序消息"><a href="#RocketMQ顺序消息" class="headerlink" title="RocketMQ顺序消息"></a>RocketMQ顺序消息</h2><p>在一些应用场景,需要做到消息的有序性,即生产和消费严格按照FIFO的方式来进行,默认情况,<code>RocketMQ</code>发送消息不是有序的,所以这篇文章来介绍<code>RocketMQ</code>顺序消息.</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>首先消息是存放在主题中的,一个主题有多个分区,如果分区只有一个,生产者按照顺序发送消息到这个分区,消费者按照分区中消息存放的顺序消费消息,那么就能保证全局有序.如果分区有多个,那么生产者就要把消息按照一定的规则分配到指定的某个分区,消费者还是按照分区中消息存放的顺序消费消息,虽然这不能保证全局有序,但是可以保证分区有序.</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这里的例子来自于<code>RocketMQ</code>官方文档.业务场景是用户下一个订单的各个步骤,因为这些步骤的顺序是至关重要的,所以必须使用顺序消息来实现.</p><p>完整代码请参考<a href="https://github.com/CodeShowZz/code-repository/tree/master/rocketmq-demo/src/main/java/com/rocketmq/order">https://github.com/CodeShowZz/code-repository/tree/master/rocketmq-demo/src/main/java/com/rocketmq/order</a></p><h4 id="生产者关键代码"><a href="#生产者关键代码" class="headerlink" title="生产者关键代码"></a>生产者关键代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">SendResult sendResult = producer.send(msg, <span class="hljs-keyword">new</span> MessageQueueSelector() &#123;<br>               @Override<br>               <span class="hljs-function"><span class="hljs-keyword">public</span> MessageQueue <span class="hljs-title">select</span>(<span class="hljs-params">List&lt;MessageQueue&gt; mqs, Message msg, Object arg</span>)</span> &#123;<br>                   Long id = (Long) arg;  <span class="hljs-comment">//根据订单id选择发送queue</span><br>                   <span class="hljs-built_in">long</span> index = id % mqs.size();<br>                   <span class="hljs-keyword">return</span> mqs.<span class="hljs-keyword">get</span>((<span class="hljs-built_in">int</span>) index);<br>               &#125;<br>           &#125;, orderList.<span class="hljs-keyword">get</span>(i).getOrderId());<span class="hljs-comment">//订单id</span><br></code></pre></td></tr></table></figure><p>生产者在发送消息时,需要实现一个<code>MessageQueueSelector</code>接口,并根据业务id(比如订单id)将消息发送到指定分区中.</p><h4 id="消费者关键代码"><a href="#消费者关键代码" class="headerlink" title="消费者关键代码"></a>消费者关键代码</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">consumer.register<span class="hljs-constructor">MessageListener(<span class="hljs-params">new</span> MessageListenerConcurrently()</span> &#123;<br>            public ConsumeConcurrentlyStatus consume<span class="hljs-constructor">Message(List&lt;MessageExt&gt; <span class="hljs-params">msgs</span>, ConsumeConcurrentlyContext <span class="hljs-params">context</span>)</span> &#123;<br>                <span class="hljs-keyword">for</span> (MessageExt messageExt : msgs) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;consumer:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">messageExt</span>.<span class="hljs-params">getBody</span>()</span>));<br>                &#125;<br>                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>使用<code>MessageListenerConcurrently</code>接口方式来消费消息,在我的测试中,可以观察到消息是按照分区有序来消费的.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">consumer.register<span class="hljs-constructor">MessageListener(<span class="hljs-params">new</span> MessageListenerOrderly()</span> &#123;<br>            public ConsumeOrderlyStatus consume<span class="hljs-constructor">Message(List&lt;MessageExt&gt; <span class="hljs-params">msgs</span>, ConsumeOrderlyContext <span class="hljs-params">context</span>)</span> &#123;<br>                context.set<span class="hljs-constructor">AutoCommit(<span class="hljs-params">true</span>)</span>;<br>                <span class="hljs-keyword">for</span>(MessageExt msg : msgs) &#123;<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;consumeThread=&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;queueId=&quot;</span> +<br>                            msg.get<span class="hljs-constructor">QueueId()</span> + <span class="hljs-string">&quot;, content:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">msg</span>.<span class="hljs-params">getBody</span>()</span>));<br>                &#125;<br>                return ConsumeOrderlyStatus.SUCCESS;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>使用<code>MessageListenerOrderly</code>接口,在我的测试中,是按照全局有序来消费的,也就是生产者如何生产的,消费者就是如何消费的,这个和官方文档描述的只有一个分区时的全局有序有所出入.</p>]]></content>
    
    
    <categories>
      
      <category>rocketmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运营系统介绍</title>
    <link href="/2021/06/14/%E8%BF%90%E8%90%A5%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/06/14/%E8%BF%90%E8%90%A5%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运营系统介绍"><a href="#运营系统介绍" class="headerlink" title="运营系统介绍"></a>运营系统介绍</h2><p>每个公司可能会有这样一个系统,它负责给公司的用户发布一些营销信息,比如通过短信的方式或者通过APP消息的方式来触达用户.那么首先应该要有一个用户标签的概念,用户标签指的是用户的特征,比如用户在最近30天内购买过一个理财产品,通过一个或多个特征,我们可以从一个用户库里面筛选出一部分人出来,我们称它为客群.有了客群,我们还需要营销的信息,比如给用户发短信,发优惠券等各种各样能触达到用户的方式,这类信息叫做触点.最后一点是我们将在什么时候触达用户,这个叫做执行时间.总结起来,运营系统最主要的职责便是在某个时间,向特定的用户发布特定的信息.除此之外,在某一次任务执行完成之后,我们还需要追踪任务的执行情况,以获取最终的运营效果.</p><h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><p>当然,每个公司的业务不一样,可能运营系统还会承担其它的一些职责,现在介绍一下我之前参与开发的运营系统的功能.如图:<br><img src="/images/operation_system_introduce_01.png" alt="功能架构"></p><h4 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h4><p>这一部分主要是建立用户-角色体系,运营系统主要针对的用户不是大众用户,而是服务于公司内部的运营人员.主要由以下几点组成:</p><ul><li>用户</li><li>角色</li><li>权限</li><li>菜单</li><li>定时任务</li></ul><p>在运营系统中,首先需要有用户来操作,接着会给予用户某个角色,通过角色控制用户的权限,比如用户可以看到什么菜单,做什么操作(菜单权限和接口权限).另外,定时任务主要给开发人员配置定时任务,在某个时间点执行某个任务.</p><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>这一部分主要是服务于任务执行的信息,比如客群和标签,这一部分主要对接公司的大数据部门.当然短信配置和消息配置其实也算是基础配置,但从功能点来分的话,就没把它们放到基础配置里面了.另外运营系统还服务于另外一个广告系统,所以这部分还有其它一些配置功能.主要功能如下:</p><p>任务执行相关:</p><ul><li>标签:一个表达式,标识用户的某个特征.</li><li>客群:标签的组合,最终筛选出一批用户.</li></ul><p>广告系统相关:</p><ul><li>运营位:运营位对应APP上的某个广告位.</li><li>素材:素材也就是广告的内容,一般为图片或者文案.</li><li>推广计划:也就是广告,其中会指定广告位置、素材、客群,同时还有其它一些配置,比如推广的时间段,比如指定用户的操作系统类型(只给安卓用户下发某个广告).</li><li>ABTest:主要用户建立实验,进行广告策略的分流.</li><li>账户:创建推广计划时,还需要指定账户,账户会充值一定的金额.当一条广告下发时,将消耗这个账户的一部分金额.</li></ul><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p>短信任务和息任务是系统的核心,以这两个触点触达用户.素材自动化也是一个比较核心的功能,以自动化的方式来生成素材,能提升素材的生成效率.</p><ul><li>短信任务:在指定时间,向客群发送短信.</li><li>消息任务:在指定时间,向客群发送消息.</li><li>素材自动化:主要用于自动化生成素材.运营人员自己创建一张图片的成本比较高,如果可以根据用户上传图片的模板信息来组合成一系列的素材,那么素材创建将会更加的高效.</li></ul><h4 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h4><p>这一部分是由其他部分产生的扩展功能.</p><ul><li>任务执行信息:任务执行过程的信息:比如调用短信接口的次数,成功数以及失败数.</li><li>任务监控:主要用于监控任务的执行情况,当任务执行满足一定的条件时(比如任务开始5分钟之内没有执行成功的记录),将会进行任务预警.</li><li>任务预警:主要通过短信和邮件的方式告知开发人员任务执行异常.</li><li>定时清理任务:将超过一定时间点的数据清除(比如半年).</li><li>报表订阅:这个主要和报表功能相关,当用户订阅报表时,将通过邮件发送给用户.</li></ul><h4 id="效果数据"><a href="#效果数据" class="headerlink" title="效果数据"></a>效果数据</h4><p>这一部分主要用于追踪短信和消息以及广告的执行情况,但是这类数据有个很明显的特点,它们不是实时的产生效果数据的,比如一条短信下发之后,可能由于短信运营商或者用户原因(比如停机)导致无法接收到短信,那么就需要追踪一个时间段发送出去的短信,那么就有个问题:通过什么方式来追踪呢?</p><p>在我们的系统中,创建一个短信任务时,将同时为每个短信内容创建一个模板id(通过对接短信平台),也就是短信的唯一标识.发送短信时,只要通过这个标识调用短信平台接口就可以了.除此之外,短信的发送状态一般由短信平台同步到大数据的<code>Hive</code>库中,运营平台需要每天去拉取某个时间段的短信状态信息(比如截止到短信发送后一周,仍然要拉取短信状态信息).</p><p>消息任务的效果追踪和短信是类似的,至于广告,主要对<code>Hive</code>库的广告下发表、广告展示表还有广告点击表的数据进行统计.</p><ul><li>短信任务报表:展示短信最终的效果信息,比如到达量,发送成功量,失败量.</li><li>消息任务报表:展示消息最终的效果信息,比如到达量,发送成功量,失败量.</li><li>广告报表.展示广告下发量、浏览量、点击量等信息.</li></ul><h4 id="形成闭环"><a href="#形成闭环" class="headerlink" title="形成闭环"></a>形成闭环</h4><p>从用户创建任务,到任务执行,再到查看营销结果,整个系统形成了一个闭环,从上面的图中自上而下也能很明显得看出这一点.</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>在我参与开发的运营系统中,主要用到的技术如下图:<br><img src="/images/operation_system_introduce_02.png" alt="技术栈"></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>系统主要分为四个模块:</p><ul><li>web模块</li><li>配置模块</li><li>数据模块</li><li>任务执行模块</li></ul><p>根据模块的职责,各个模块的表情况如下图:<br><img src="/images/operation_system_introduce_03.png" alt="数据库"></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>运营系统其实大部分流程并不复杂,这里简单的描述一下短信任务的一个流程,复杂性在于要把系统的各个模块串联起来.主要流程描述如下:</p><ol><li>短信任务执行之前,会有短信模板id的生成(在创建任务的时候会生成,还会有定时任务每天重新生成新的模板id)</li><li>拉取任务对应的客群,调用短信接口发送短信</li><li>在任务执行过程中,会记录任务执行的情况(任务发送了多少条短信,调用短信发送接口成功数和失败数).</li><li>每日的短信任务报表的拉取,以此来查看短信最终的触达情况.</li></ol><p>短信任务流程图:<br><img src="/images/operation_system_introduce_04.png" alt="短信任务流程"></p><p>再详细一点,短信任务的执行流程图:</p><p><img src="/images/operation_system_introduce_05.png" alt="短信任务执行流程"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章大致介绍了之前参与开发的运营系统的主要功能,不同的运营系统的设计可能多种多样,需要开发人员发挥想象力,创造更有价值的功能.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于注解的动态数据源实现</title>
    <link href="/2021/06/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/06/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基于注解的动态数据源实现"><a href="#基于注解的动态数据源实现" class="headerlink" title="基于注解的动态数据源实现"></a>基于注解的动态数据源实现</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有些项目不只访问一个数据库,可能需要访问多个数据库,那么就会有一个问题,怎么进行数据源的切换.</p><h3 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h3><p>解决这个需求的一个常见解决方案是使用动态数据源.下面将按部就班的来介绍一下如何实现基于注解的动态数据源.完整的代码请参考<a href="https://github.com/CodeShowZz/data-source/tree/master/dynamic-data-source">https://github.com/CodeShowZz/data-source/tree/master/dynamic-data-source</a>.</p><h4 id="第一步-配置数据源"><a href="#第一步-配置数据源" class="headerlink" title="第一步:配置数据源"></a>第一步:配置数据源</h4><p>将项目中需要使用的数据源放到一个配置文件中,比如叫做jdbc.properties,在我的例子中,我有两个数据源,一个是learning库,另外一个是test库.</p><p>数据库配置文件:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.test</span>.driver-class-name=com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.jdbc</span>.Driver<br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.test</span>.jdbc-url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?useSSL=false&amp;serverTimezone=GMT%2B8&amp;characterEncoding=UTF-8</span><br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.test</span>.username=root<br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.test</span>.password=<span class="hljs-number">123456</span><br><br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.learning</span>.driver-class-name=com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.jdbc</span>.Driver<br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.learning</span>.jdbc-url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/learning?useSSL=false&amp;serverTimezone=GMT%2B8&amp;characterEncoding=UTF-8</span><br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.learning</span>.username=root<br>spring<span class="hljs-selector-class">.datasource</span><span class="hljs-selector-class">.learning</span>.password=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>数据源常量类:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceConstants</span> &#123;</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> DB_LEARNING = <span class="hljs-string">&quot;learning&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> DB_TEST= <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态数据源类:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> determineCurrentLookupKey() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">DynamicDataSourceContextHolder</span>.getContextKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用了一个<code>DynamicDataSourceContextHolder</code>类,将在下面进行讲解.</p><p>数据源配置:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">EnableAutoConfiguration(<span class="hljs-params">exclude</span> = &#123;DataSourceAutoConfiguration.<span class="hljs-params">class</span>&#125;)</span><br>@Configuration<br>@<span class="hljs-constructor">PropertySource(<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>)</span><br>@<span class="hljs-constructor">MapperScan(<span class="hljs-params">basePackages</span> = <span class="hljs-string">&quot;com.dynamic.datasource.dao&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> DynamicDataSourceConfig &#123;<br><br>    @<span class="hljs-constructor">Bean(DataSourceConstants.DB_LEARNING)</span><br>    @<span class="hljs-constructor">ConfigurationProperties(<span class="hljs-params">prefix</span> = <span class="hljs-string">&quot;spring.datasource.learning&quot;</span>)</span><br>    public DataSource learning<span class="hljs-constructor">DataSource()</span> &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DataSourceBuilder</span>.</span></span>create<span class="hljs-literal">()</span>.build<span class="hljs-literal">()</span>;<br>    &#125;<br><br>    @<span class="hljs-constructor">Bean(DataSourceConstants.DB_TEST)</span><br>    @<span class="hljs-constructor">ConfigurationProperties(<span class="hljs-params">prefix</span> = <span class="hljs-string">&quot;spring.datasource.test&quot;</span>)</span><br>    public DataSource test<span class="hljs-constructor">DataSource()</span> &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DataSourceBuilder</span>.</span></span>create<span class="hljs-literal">()</span>.build<span class="hljs-literal">()</span>;<br>    &#125;<br><br>    @Bean<br>    @Primary<br>    public DataSource dynamic<span class="hljs-constructor">DataSource()</span> &#123;<br>        Map&lt;Object, Object&gt; dataSourceMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap(2)</span>;<br>        dataSourceMap.put(DataSourceConstants.DB_LEARNING, learning<span class="hljs-constructor">DataSource()</span>);<br>        dataSourceMap.put(DataSourceConstants.DB_TEST, test<span class="hljs-constructor">DataSource()</span>);<br>        DynamicDataSource dynamicDataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DynamicDataSource()</span>;<br>        dynamicDataSource.set<span class="hljs-constructor">TargetDataSources(<span class="hljs-params">dataSourceMap</span>)</span>;<br>        dynamicDataSource.set<span class="hljs-constructor">DefaultTargetDataSource(<span class="hljs-params">testDataSource</span>()</span>);<br>        return dynamicDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里讲一下具体的原理,首先我们定义了两个数据源,然后在<code>dynamicDataSource</code>方法中定义了一个<code>Map</code>,将两个数据源以(名称,数据源)的形式放入.接着调用<code>setTargetDataSources</code>将<code>Map</code>设置进去,并通过<code>setDefaultTargetDataSource</code>设置了默认数据源.在每次执行sql语句时,将通过<code>DynamicDataSource</code>类实现的<code>determineCurrentLookupKey</code>方法返回的key从<code>Map</code>中找到对应的数据源,如果没有找到,将使用默认数据源.</p><p>了解了这个原理,那么改变<code>determineCurrentLookupKey</code>方法返回的key就可以实现数据源的切换,那如何改造这个方法使得可以动态切换数据源呢?通常来说,会将它放在<code>ThreadLocal</code>中.</p><h4 id="第二步-引入ThreadLocal"><a href="#第二步-引入ThreadLocal" class="headerlink" title="第二步:引入ThreadLocal"></a>第二步:引入ThreadLocal</h4><p>定义ThreadLocal对象:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSourceContextHolder</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 动态数据源名称上下文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">String</span>&gt; DATASOURCE_CONTEXT_KEY_HOLDER</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置/切换数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContextKey</span>(<span class="hljs-params">String key</span>)</span>&#123;<br>        DATASOURCE_CONTEXT_KEY_HOLDER.<span class="hljs-keyword">set</span>(key);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据源名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getContextKey</span>(<span class="hljs-params"></span>)</span>&#123;<br>        String key = DATASOURCE_CONTEXT_KEY_HOLDER.<span class="hljs-keyword">get</span>();<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-literal">null</span>? DataSourceConstants.DB_TEST:key;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除当前数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeContextKey</span>(<span class="hljs-params"></span>)</span>&#123;<br>        DATASOURCE_CONTEXT_KEY_HOLDER.<span class="hljs-keyword">remove</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很清晰可以看到上面通过<code>ThreadLocal</code>来动态的修改数据源对应的key值,以此来决定某次数据库操作使用的是哪个数据源.至此,一个简单的动态数据源实现就搞定了,接下来可以测试一下.</p><h4 id="第三步-测试"><a href="#第三步-测试" class="headerlink" title="第三步:测试"></a>第三步:测试</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">DynamicDataSource()</span> &#123;<br>    Student student = studentDao.query<span class="hljs-constructor">ById(1)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(student);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>set<span class="hljs-constructor">ContextKey(DataSourceConstants.DB_LEARNING)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(userDao.select<span class="hljs-constructor">ById(1)</span>);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>remove<span class="hljs-constructor">ContextKey()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>set<span class="hljs-constructor">ContextKey(DataSourceConstants.DB_TEST)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentDao.query<span class="hljs-constructor">ById(1)</span>);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>remove<span class="hljs-constructor">ContextKey()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样,就可以实现动态数据源了,但是可以很清楚的看到,我们需要在做数据库操作时设置<code>ThreadLocal</code>的值,使用后还要清除值,如果能够尽可能消除这种样板代码就更好了.我们可以引入AOP,并自定义注解来做这件事.</p><h4 id="第四步-引入AOP"><a href="#第四步-引入AOP" class="headerlink" title="第四步:引入AOP"></a>第四步:引入AOP</h4><p>注解:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)<br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br>public <span class="hljs-variable">@interface</span> DS &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据源名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">value</span>() <span class="hljs-selector-tag">default</span> <span class="hljs-selector-tag">DataSourceConstants</span><span class="hljs-selector-class">.DB_TEST</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AOP:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Aspect<br>@Component<br>public <span class="hljs-keyword">class</span> DynamicDataSourceAspect &#123;<br><br>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">&quot;@annotation(com.dynamic.datasource.annotation.DS)&quot;</span>)</span><br>    public void data<span class="hljs-constructor">SourcePointCut()</span> &#123;<br><br>    &#125;<br><br>    @<span class="hljs-constructor">Around(<span class="hljs-string">&quot;dataSourcePointCut()&quot;</span>)</span><br>    public Object around(ProceedingJoinPoint joinPoint) throws Throwable&#123;<br>        String dsKey = get<span class="hljs-constructor">DSAnnotation(<span class="hljs-params">joinPoint</span>)</span>.value<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>set<span class="hljs-constructor">ContextKey(<span class="hljs-params">dsKey</span>)</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            return joinPoint.proceed<span class="hljs-literal">()</span>;<br>        &#125;finally &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DynamicDataSourceContextHolder</span>.</span></span>remove<span class="hljs-constructor">ContextKey()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类或方法获取数据源注解指定的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> DS get<span class="hljs-constructor">DSAnnotation(ProceedingJoinPoint <span class="hljs-params">joinPoint</span>)</span> &#123;<br>        Class&lt;?&gt; targetClass = joinPoint.get<span class="hljs-constructor">Target()</span>.get<span class="hljs-constructor">Class()</span>;<br>        DS classAnnotation = targetClass.get<span class="hljs-constructor">Annotation(DS.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-keyword">if</span> (classAnnotation != null) &#123;<br>            return classAnnotation;<br>        &#125;<br>        MethodSignature methodSignature = (MethodSignature) joinPoint.get<span class="hljs-constructor">Signature()</span>;<br>        return methodSignature.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Annotation(DS.<span class="hljs-params">class</span>)</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在Dao层接口的类或方法上添加注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-meta">@DS(DataSourceConstants.DB_TEST)</span><br>    <span class="hljs-function">Student <span class="hljs-title">queryById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Mapper</span><br><span class="hljs-variable">@DS</span>(DataSourceConstants.DB_LEARNING)<br>public interface UserDao &#123;<br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">selectById</span>(Integer id);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第五步-再次测试"><a href="#第五步-再次测试" class="headerlink" title="第五步:再次测试"></a>第五步:再次测试</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>   public void test<span class="hljs-constructor">DynamicDataSourceUseAnnotation()</span> &#123;<br>       Student student = studentDao.query<span class="hljs-constructor">ById(1)</span>;<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(student);<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(userDao.select<span class="hljs-constructor">ById(1)</span>);<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(studentDao.query<span class="hljs-constructor">ById(1)</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>这样基于注解的动态数据源就实现完成了.</p>]]></content>
    
    
    <categories>
      
      <category>数据源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对数据权限实现的思考</title>
    <link href="/2021/06/10/%E5%AF%B9%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2021/06/10/%E5%AF%B9%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对数据权限实现的思考"><a href="#对数据权限实现的思考" class="headerlink" title="对数据权限实现的思考"></a>对数据权限实现的思考</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前在公司做项目的时候,有这么一个需求,需要在现有的系统的某些表上加上数据权限功能.每个用户都有一个角色id,现在要使得相同的角色id可以查询相同的数据,超级管理员的id为1,这个角色可以查询所有的数据.</p><h3 id="从简单做起"><a href="#从简单做起" class="headerlink" title="从简单做起"></a>从简单做起</h3><p>对数据库的操作无非就是CRUD,既然要实现数据权限,那么最简单的方式就是在表里面新增一个roleId字段,然后把它当成一个业务字段来做CRUD,这样非常简单.但是这样会使人有点烦躁,为了实现这个功能,就要将该字段不断的在系统间传递,这样是不是挺麻烦的?</p><h3 id="使roleId传递更方便"><a href="#使roleId传递更方便" class="headerlink" title="使roleId传递更方便"></a>使roleId传递更方便</h3><p>我们的系统有一个和前端打交道的web模块,web模块将调用其余业务模块来进行业务处理.我之前实现这个功能的时候,在Web层实现了一个切面,这个切面是切在对业务模块的调用上,也就是web模块的出口处,因为之前接口方法都满足一定的规范,所以切点就比较通用,然后切面所做的事情就是从Session中取出roleId,然后判断调用的方法参数中是否有roleId字段(通过反射),有则将roleId设置进去,这样roleId就可以自动的进行传递了.</p><p>在业务模块中,也实现一个切面,切点为业务模块的入口处,因为web模块已经设置了roleId,那么我们现在取roleId的目的是为了将roleId保存起来,到Dao层再对sql执行进行拦截,同样检测一下是否字段有roleId,有则将roleId设置进去.在我的实现中,我是使用ThreadLocal来保存入口处的roleId,在拦截器中从ThreadLocal中获取roleId,如果方法参数中有roleId这个字段,则设置进去.</p><p>整个系统其实有三个切面,一个是web模块的切面,一个是业务模块入口的切面,最后一个是sql拦截器(这个也当成一个切面).</p><p>说了这么多,其实无非就是解决roleId如何在系统间传递的问题.但是现在想起来,之前这么做是有点武断的.因为需要做数据权限的表也只是少数,不是所有的调用方法都应该拦截,这样可能会对系统的响应时间造成影响.所以现在想想,如果要改进这个问题,可以自定义一个注解,然后在需要获取或者设置roleId的方法上加上注解,把切点变成基于注解的拦截.这样和直接在系统中直接传递roleId比起来,我也不知道是不是把问题搞复杂了,本来在系统间就是要传递各种数据的,大费周章搞这些切面干什么.如果再让我实现一次,我觉得还是直接在系统间传递roleId好了,除非代码太复杂,直接传递roleId不大可行,我觉得通过切面来传递才有好处.</p><h3 id="SQL改造"><a href="#SQL改造" class="headerlink" title="SQL改造"></a>SQL改造</h3><p>在我的实现中,我还对查询语句做了一个sql改造,现在想起来感觉是有点画蛇添足了,但是还是想表达表达.假如有这么一条sql:<code>select id,name from student where id = #&#123;id&#125;</code>,假如在不修改这句sql的前提下,如何将其改成是带有roleId的查询呢?思路是这样的,用拦截器拦截原sql,在外面再嵌套一层sql,形如<code>select * from (原sql) where roleId = #&#123;roleId&#125;</code>,当然原sql的查询字段上要包含roleId字段,这样的话对于大多数sql都是通用的.但是为什么不直接在sql语句中(用的是mybatis)直接加上<code>roleId = #&#123;roleId&#125;</code>呢?因为之前一个表里面可能有多个sql查询语句,且查询的字段使用了mybatis的<code>&lt;sql&gt;&lt;/sql&gt;</code>和<code>&lt;include&gt;&lt;/include&gt;</code>来复用,所以只要在<code>&lt;sql&gt;&lt;/sql&gt;</code>间再加入一个roleId字段,就可以通过上面的方式来简单的改造SQL语句了.现在想想,除非对某个表的查询语句太多(一般不会),否则直接在原sql上加入查询条件或许更好,首先第一点改造的只是查询,其它的数据库操作还是要对原sql进行改造,并且改造查询给系统也带来了复杂性,可能这种改造对复杂sql还不一定适用.</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>在这里总结一下整个流程:</p><ol><li>从web层的session中获取roleId,设置到web层调用业务层的对象上(如果有roleId)</li><li>获取业务层入口方法的方法参数,将roleId设置在ThreadLocal中.</li><li>数据库操作时,使用拦截器将ThreadLocal中的roleId设置到方法参数上.</li><li>如果是查询操作,拦截器改造原sql.</li></ol><p>这里还要强调一下,在我的实现中,查询在原sql的查询字段上加入roleId即可,其余操作仍然需要修改sql语句.</p><p>另外,在三个切面中,可以选择通过规范的方法名称来实现切点,也可以使用基于注解的方式来实现切点,前者比较通用但多了很多不必要的判断,后者需要我们指定拦截的地方,少了不必要的判断却增加了一些开发量.</p><h3 id="形成组件"><a href="#形成组件" class="headerlink" title="形成组件"></a>形成组件</h3><p>在我的实现中,因为关于roleId的切面、注解、拦截器是通用的,所以我将它们全部都放在了一个新的项目中,形成一个组件,然后让业务模块依赖它.</p><h3 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap,show me the code"></a>Talk is cheap,show me the code</h3><p>俗话说得好,没有代码你说个XX.之前在公司做这个功能的时候,可能一股脑就想着简化,现在想起来觉得不能为了简化而简化,现在我觉得这个数据权限的思路可以记录下来,但是要让我再实现它一次觉得已经没有动力了,所以就不再想写代码了.(好吧,我承认再实现一遍有点折磨人😭)</p>]]></content>
    
    
    <categories>
      
      <category>数据权限</category>
      
    </categories>
    
    
    <tags>
      
      <tag> 数据权限</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ABTest分流算法设计与实现</title>
    <link href="/2021/06/08/ABTest%E5%88%86%E6%B5%81%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    <url>/2021/06/08/ABTest%E5%88%86%E6%B5%81%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ABTest分流算法设计与实现"><a href="#ABTest分流算法设计与实现" class="headerlink" title="ABTest分流算法设计与实现"></a>ABTest分流算法设计与实现</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有这么一个需求,我们需要建立一个实验,实验有一个实验名称.实验下面有多个分组,每个分组也有个分组名称.当我们创建一个实验的时候,需要同时建立一个或多个分组,并且每个分组都有一个百分比的属性,代表当我们进入一个实验的时候,选择某个分组的可能性有多大,所有的分组的百分比之和为100%.</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>通过实现实验和分组,我们可以把它应用在分流策略中,比如ABTest.考虑这样一个场景,我们要对比三个推荐算法带来的效益,此时我们会给这三个推荐算法分配一定的比例,然后让每次推荐都按这个比例来执行不同的算法,最终再根据一定的换算来统计算法带来的效益.</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>我们可以将分组的百分比看成是几条线段,假如总共有100米长,每条线段有一定的长度,我们根据标识(比如hashCode)来对100取模,最终这个数字一定会落在某一条线段上,也就是某个分组上.在我的实现中,将以1000作为模.在这里,我将使用Java语言实现一个简单的分流算法.</p><p>完整代码地址为:<a href="https://github.com/CodeShowZz/abtest">https://github.com/CodeShowZz/abtest</a>,所有的接口都进行了初步的测试.</p><h4 id="步骤一-定义模型"><a href="#步骤一-定义模型" class="headerlink" title="步骤一:定义模型"></a>步骤一:定义模型</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lab</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> key;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">List</span>&lt;Group&gt; groupList;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Group</span> &#123;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> key;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  百分比</span><br><span class="hljs-comment">    **/</span><br>    <span class="hljs-keyword">private</span> BigDecimal ratio;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分组的开始位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> start;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分组的结束位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤二-实现分流工具类"><a href="#步骤二-实现分流工具类" class="headerlink" title="步骤二:实现分流工具类"></a>步骤二:实现分流工具类</h4><p>这里要实现一个工具类,能够将百分比转换成区间.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> assignRangeByRatio(Lab lab) &#123;<br>       List&lt;<span class="hljs-keyword">Group</span>&gt; groupList = lab.getGroupList();<br>       <span class="hljs-type">int</span> <span class="hljs-keyword">current</span> = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">Group</span> <span class="hljs-keyword">group</span> : groupList) &#123;<br>           BigDecimal ratio = <span class="hljs-keyword">group</span>.getRatio();<br>           <span class="hljs-type">int</span> count = ratio.multiply(range).setScale(<span class="hljs-number">0</span>, RoundingMode.HALF_UP).intValue();<br>           <span class="hljs-type">int</span> start = <span class="hljs-keyword">current</span>;<br>           <span class="hljs-type">int</span> end = <span class="hljs-keyword">current</span> + count - <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">group</span>.setStart(<span class="hljs-keyword">start</span>);<br>           <span class="hljs-keyword">group</span>.setEnd(<span class="hljs-keyword">end</span>);<br>           <span class="hljs-keyword">current</span> = <span class="hljs-keyword">end</span> + <span class="hljs-number">1</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="步骤三-获取标识取Hash-将其分配到某个分组中"><a href="#步骤三-获取标识取Hash-将其分配到某个分组中" class="headerlink" title="步骤三:获取标识取Hash,将其分配到某个分组中."></a>步骤三:获取标识取Hash,将其分配到某个分组中.</h4><p>在我的实现中,如果两次传入的标识key是一样的,那么计算出来的分组位置也是一样的.所以使用这个Hash算法时,可能要根据具体的应用场景来取一个具体的key,比如对于一个用户来说,取值如果要和上次相同,那么可以使用用户id来作为key,如果取值要随机,那么可以取时间戳或者其它属性作为key.</p><p>这里我的Hash算法借鉴(可以说是照抄)了HashMap中的Hash算法.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static final <span class="hljs-built_in">int</span> hash<span class="hljs-constructor">Code(String <span class="hljs-params">key</span>, String <span class="hljs-params">value</span>)</span> &#123;<br>       return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>abs(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Objects</span>.</span></span>hash<span class="hljs-constructor">Code(<span class="hljs-params">key</span>)</span> ^ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Objects</span>.</span></span>hash<span class="hljs-constructor">Code(<span class="hljs-params">value</span>)</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>接着,使用上面的模型并且结合Hash算法来实现分组.分区函数的返回结果就是某一个分组.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">public static<span class="hljs-built_in"> Group </span>partition(String key, Lab lab) &#123;<br>    int hashCode = hashCode(key, lab.getName());<br>    int position = hashCode % range.intValue();<br>    List&lt;Group&gt; groupList = lab.getGroupList();<br>    <span class="hljs-keyword">for</span> (Group<span class="hljs-built_in"> group </span>: groupList) &#123;<br>        <span class="hljs-keyword">if</span> (group.getStart() &lt;= position &amp;&amp; group.getEnd() &gt;= position) &#123;<br>            return group;<br>        &#125;<br>    &#125;<br>    return <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤四-测试"><a href="#步骤四-测试" class="headerlink" title="步骤四:测试"></a>步骤四:测试</h4><p>通过上面的三个步骤,一个简单的分流算法实现完成.现在我们来假设这样一个场景:据统计,50%的人喜欢数学,30%的人喜欢语文,20%的人喜欢英语,那么现在我们随便找一个人,来猜测它喜欢哪个科目,那么我们就可以使用上面的程序,测试程序如下.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros">public static void main(String[] args) &#123;<br>        Lab subject = new Lab();<br>       <span class="hljs-built_in"> Group </span>math = new Group();<br>        math.setRatio(new BigDecimal(0.5));<br>        math.setKey(<span class="hljs-string">&quot;math&quot;</span>);<br>        math.setName(<span class="hljs-string">&quot;数学&quot;</span>);<br><br>       <span class="hljs-built_in"> Group </span>chinese = new Group();<br>        chinese.setRatio(new BigDecimal(0.3));<br>        chinese.setKey(<span class="hljs-string">&quot;chinese&quot;</span>);<br>        chinese.setName(<span class="hljs-string">&quot;语文&quot;</span>);<br><br>       <span class="hljs-built_in"> Group </span>english = new Group();<br>        english.setRatio(new BigDecimal(0.2));<br>        english.setKey(<span class="hljs-string">&quot;english&quot;</span>);<br>        english.setName(<span class="hljs-string">&quot;英语&quot;</span>);<br><br>        List&lt;Group&gt; groupList = Arrays.asList(math, chinese, english);<br>        subject.setGroupList(groupList);<br>        subject.setKey(<span class="hljs-string">&quot;subject&quot;</span>);<br>        subject.setName(<span class="hljs-string">&quot;学科&quot;</span>);<br><br>        SplitFlowUtil.splitFlow(subject);<br><br>       <span class="hljs-built_in"> Group </span>res = partition(<span class="hljs-string">&quot;the boy maybe like math&quot;</span>, subject);<br>        System.out.println(res);<br><br>        res = partition(<span class="hljs-string">&quot;i am a programmer&quot;</span>, subject);<br>        System.out.println(res);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="继续思考"><a href="#继续思考" class="headerlink" title="继续思考"></a>继续思考</h3><p>很明显,上面的这个程序其实算是一个通用程序,如果设计的算法更加的快捷,API接口更加易用,它完全可以作为一个公司内部的服务来提供给别人调用.所以现在我们要思考如何将它改进成一个公司内部可以使用的程序.</p><h4 id="改进一-建立微服务"><a href="#改进一-建立微服务" class="headerlink" title="改进一:建立微服务"></a>改进一:建立微服务</h4><p>提供添加、更新、删除、查询、分流五个接口来对实验进行操作,在这里使用Restful接口来提供这项服务.</p><h4 id="改进二-将模型数据存储到Mysql"><a href="#改进二-将模型数据存储到Mysql" class="headerlink" title="改进二:将模型数据存储到Mysql"></a>改进二:将模型数据存储到Mysql</h4><p>上面的测试程序只是在本地构造程序,我们可以将模型数据映射成表,然后存储到数据库中,然后通过UI界面来进行CRUD,这一点很容易就可以做到,不再赘述.</p><h4 id="改进三-引入Zookeeper"><a href="#改进三-引入Zookeeper" class="headerlink" title="改进三:引入Zookeeper"></a>改进三:引入Zookeeper</h4><p>很明显,既然要在公司内部使用,那么要保证每个实验都是隶属于某个项目的,首先要保证实验的唯一性,而这又能看出有很明显的层级结构,所以可以引入Zookeeper来存储这些模型数据,而上面的Mysql则用于冗余模型数据.</p><h3 id="开始第一次改进"><a href="#开始第一次改进" class="headerlink" title="开始第一次改进"></a>开始第一次改进</h3><p>先列一下实现上述改进所要引入的一些技术,其中改进二不在本次实现考虑范围.另外在下文中可能不会提供所有的代码,完整的代码将在最后给出Github仓库地址.</p><ul><li>序列化框架:Kryo,用于序列化模型数据并将其存储到Zookeeper上</li><li>微服务框架:Spring Boot,用于实现一个微服务并提供Restful接口</li><li>分布式协调框架:Zookeeper及其API,用于实现模型数据的保存,并形成目录结构.</li></ul><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>在工程中实现对zookeeper api的调用,主要考虑的操作有4种</p><ul><li>节点增加</li><li>节点更新</li><li>节点删除</li><li>节点数据查询</li></ul><p>出于更新的复杂性,调用方可能修改实验名称、分组名称以及分组的属性,所以在真正实现中,将使用节点删除加上节点增加来实现节点更新.在这里将不会讨论Zookeeper API的细节,假设读者已经对此有一定的了解和经验.</p><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><p>构建一个Spring Boot服务是非常简单的,和上述的Zookeeper类似,我们将对外提供几个api供外部接口调用.</p><ul><li>实验创建 </li><li>实验更新</li><li>实验删除</li><li>实验查询</li><li>根据实验名称进行分流</li></ul><p>API如下所示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建实验</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">lab</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/create&quot;</span>, method = RequestMethod.POST)<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">create</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Lab lab</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> labService.create(lab);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据projectKey和labKey删除实验</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">lab</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/delete&quot;</span>, method = RequestMethod.POST)<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Lab lab</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> labService.delete(lab);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据projectKey和labKey查询实验下的分组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">projectKey</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">labKey</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/query&quot;</span>, method = RequestMethod.GET)<br>  <span class="hljs-keyword">public</span> List&lt;Group&gt; <span class="hljs-function"><span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> projectKey, <span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> labKey</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> labService.query(projectKey,labKey);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据projectKey和labKey还有identify来进行分流 得到某个分组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">projectKey</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">labKey</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">identify</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;/partition&quot;</span>, method = RequestMethod.GET)<br>  <span class="hljs-keyword">public</span> Group <span class="hljs-function"><span class="hljs-title">partition</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> projectKey, <span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> labKey,<span class="hljs-meta">@RequestParam</span> <span class="hljs-built_in">String</span> identify</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> labService.partition(projectKey,labKey,identify);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新实验</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-variable">lab</span></span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">&quot;update&quot;</span>,method = RequestMethod.POST)<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> Lab lab</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> labService.update(lab);<br>  &#125;<br></code></pre></td></tr></table></figure><p>我在模型数据中又引入了几个参数:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 分流需要的参数,由调用方传入,调用方决定分流所使用的标识</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> identify;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 某个项目的标识,在ZK中是第一级目录,以来区分各个项目的实验</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> projectKey;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 在进行更新时,需要传入变更前的实验分组key,以便于删除原来的实验</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> oldKey;<br></code></pre></td></tr></table></figure><p>这几个参数的作用已经通过注释来表达,这样可以使得服务更加通用和简单.</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>实现完上述的两个改进之后,我们就可以打开PostMan或者其它Http请求工具来对我们提供的接口进行测试了,这里对如何测试不进行展开.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这篇文章中,介绍了一个简单的分流算法的设计以及实现,当然程序还存在很多不足之处,比如异常处理,参数校验,又或者是无法实现多层的分流,这都是值得改进的地方,希望以后有机会再进行改进(程序员经常说的一句话就是下次一定😄).</p>]]></content>
    
    
    <categories>
      
      <category>abtest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abtest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka如何保证发送消息有序</title>
    <link href="/2021/06/08/Kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%9C%89%E5%BA%8F/"/>
    <url>/2021/06/08/Kafka%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%9C%89%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kafka如何保证发送消息有序"><a href="#Kafka如何保证发送消息有序" class="headerlink" title="Kafka如何保证发送消息有序"></a>Kafka如何保证发送消息有序</h2><p>生产者有一个配置项叫做<code>max.in.flight.requests.per.connection</code>,这个参数能够保证生产者在收到服务器响应前能发送多少个消息.举个例子,如果我们把这个参数设置为1,那么当生产者发送了一个消息给服务器之后,只能等到服务器响应生产者发送的这个消息之后,生产者才能够继续向服务器发送消息.</p><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>优点:将<code>max.in.flight.requests.per.connection</code>配置为1后,能够保证消息的有序性.</p><p>缺点:缺点也很明显,因为必须要等待服务器响应才能够发送消息,那么就会降低生产者发送消息的吞吐量,除非有严格的顺序要求,才会将这个选项配置为1.</p>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka Producer三种使用方式</title>
    <link href="/2021/06/01/Kafka-Producer%E4%B8%89%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/06/01/Kafka-Producer%E4%B8%89%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kafka-Producer三种发送方式"><a href="#Kafka-Producer三种发送方式" class="headerlink" title="Kafka Producer三种发送方式"></a>Kafka Producer三种发送方式</h2><p>Kafka生产者使用起来非常简单,它主要有三种发送方式,分别是</p><ul><li>Fire And Forget(发送但不等待结果)</li><li>同步发送,等待结果返回</li><li>异步发送,结果通过回调接口接收</li></ul><p>这里,通过编写一个程序来展示上述的三种方式,如无环境,请参考文档自行搭建,这里就不阐述了.</p><p>具体的细节可以参考<code>Kafka API</code>,这里主要要表达的是三种使用方式,完整的代码参见<a href="https://github.com/CodeShowZz/code-repository/blob/master/kafka-demo/src/main/java/com/kafka/ProducerDemo.java">Github仓库</a></p><h3 id="Fire-And-Forget"><a href="#Fire-And-Forget" class="headerlink" title="Fire And Forget"></a>Fire And Forget</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">fireAndForget</span>(<span class="hljs-params"></span>)</span> &#123;<br>    ProducerRecord&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;(<span class="hljs-string">&quot;topic&quot;</span>, <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>    producer.send(record);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="同步发送"><a href="#同步发送" class="headerlink" title="同步发送"></a>同步发送</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMsgSync</span><span class="hljs-params">()</span> </span>&#123;<br>    ProducerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(<span class="hljs-string">&quot;topic&quot;</span>, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        RecordMetadata recordMetadata = (RecordMetadata) producer.send(record).<span class="hljs-built_in">get</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;send sync return:&quot;</span> + recordMetadata);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMsgAsync</span>(<span class="hljs-params"></span>)</span> &#123;<br>       ProducerRecord&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;(<span class="hljs-string">&quot;topic&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>       <span class="hljs-keyword">try</span> &#123;<br>           producer.send(record, <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Callback</span>(<span class="hljs-params"></span>)</span> &#123;<br>               <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onCompletion</span>(<span class="hljs-params">RecordMetadata recordMetadata, Exception e</span>)</span> &#123;<br>                   <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">e != <span class="hljs-literal">null</span></span>)</span> &#123;<br>                       e.printStackTrace();<br>                   &#125;<br>                   System.out.println(<span class="hljs-string">&quot;send async return:&quot;</span> + recordMetadata);<br>               &#125;<br>           &#125;);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elastic Search安装</title>
    <link href="/2021/05/31/ElasticSearch%E5%AE%89%E8%A3%85/"/>
    <url>/2021/05/31/ElasticSearch%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elastic-Search安装"><a href="#Elastic-Search安装" class="headerlink" title="Elastic Search安装"></a>Elastic Search安装</h2><p>俗话说:工欲善其事,必先利其器.本篇文章就来介绍一下如何安装ES,并启动它来实现万里长征的第一步.此次演示的是在Mac系统上安装ES.</p><ol><li>首先要保证拥有Java环境,版本为jdk8以上.</li><li>其次,找一个目录,执行如下命令<code>curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.16.tar.gz</code>来下载5.6.16版本的ES.</li><li>接着执行<code>tar -xvf elasticsearch-5.6.16.tar.gz</code>将下载的文件解压成文件夹.最终的效果如下截图所示.<br><img src="/images/es_install_01.png" alt="es解压后的文件"></li><li>接着执行<code>cd elasticsearch-5.6.16/bin</code>,运行<code>./elasticsearch</code>,可以看到启动后的效果,如下截图<br><img src="/images/es_install_02.png" alt="es执行"></li></ol><p>到此,大功告成!</p>]]></content>
    
    
    <categories>
      
      <category>elastic search</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elastic search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个key值如何在redis集群中找到存储在哪里</title>
    <link href="/2021/05/18/%E4%B8%80%E4%B8%AAkey%E5%80%BC%E5%A6%82%E4%BD%95%E5%9C%A8redis%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%89%BE%E5%88%B0%E5%AD%98%E5%82%A8%E5%9C%A8%E5%93%AA%E9%87%8C/"/>
    <url>/2021/05/18/%E4%B8%80%E4%B8%AAkey%E5%80%BC%E5%A6%82%E4%BD%95%E5%9C%A8redis%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%89%BE%E5%88%B0%E5%AD%98%E5%82%A8%E5%9C%A8%E5%93%AA%E9%87%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一个key值如何在redis集群中找到存储在哪里"><a href="#一个key值如何在redis集群中找到存储在哪里" class="headerlink" title="一个key值如何在redis集群中找到存储在哪里"></a>一个key值如何在redis集群中找到存储在哪里</h2><p>首先,一个集群只有在16384个槽全部都分配给了集群下的节点时,集群才能处于正常运行状态.现在假设我们集群中有三台机器,代号分别是7001,7002,7003,并且假设槽的分配关系如下:</p><ul><li>7001负责处理0-10000</li><li>7002负责处理10001-13000</li><li>7003负责处理13001-16383</li></ul><p>比如我们向7001执行一条<code>set msg hello</code>命令,这个时候7001所在的节点会调用函数<code>CRC16(key) &amp; 16383</code>,这个函数用于计算key的CRC-16校验和,然后对槽号取模,最终计算出分配给哪个槽.这个时候有两种情况,要么计算出来的槽号由自己负责,要么由其它节点负责.如果是由自己负责,那么直接执行命令,返回结果就完事了.但是如果是由别的节点负责,那么会向客户端返回MOVED错误,形式为<code>MOVED 槽号 实际处理槽节点的ip:实际处理槽的节点port</code>,指引客户端往真正处理槽的节点去发送命令.</p><p>另外还要注意的一点是,除了上述的两种情况外,其实还会有另外一种情况.考虑这样一种场景,当集群里面加入了新节点7004,并且将7001负责的0-5000分配给了7004,那么这个时候会执行重新分片操作,在这个过程中,可能存在一种情况就是槽号在分片的过程中,槽里面的键值对并没有全部分配到新的节点中,而是部分分配到新的节点中.举个例子:比如原本由7001负责的槽5000里有两个键值对,分别是(key1,value1),(key2,value2),假设(key1,value1)已经分配给了新的节点7004.这个时候,当我们向7001发送命令<code>get key1</code>的时候,7001是无法获取到值的,但是它计算出来的槽号确实是属于它自己管理的槽号,因为这个时候槽中的键值对并没有完全转移完成,所以槽的归属权还是自己的,只有当槽完全转移完成,槽才会属于7004.在这种情况下,7001是无法获取到值的,所以7001会再判断是否槽处于迁移状态,如果是的话,会返回一个ASK错误,形式为<code>ASK 槽号 实际拥有键值对的节点的ip:实际拥有键值对的节点的port</code>,让客户端向真正拥有该键值对的节点去发送请求.</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
